{"version":3,"file":"static/js/572.6fe0eb1c.chunk.js","mappings":"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","sources":["components/FormFrame.jsx","services/Grains&Bakery/breads.js","components/Grains&Bakery/Breads.jsx","components/variables.js","../node_modules/fraction-parser/lib/helpers/getClosestLookupNumber.js","../node_modules/fraction-parser/lib/helpers/numberLookupMap.js","../node_modules/fraction-parser/lib/index.js","../node_modules/fraction-parser/lib/toDecimal.js","../node_modules/fraction-parser/lib/toFraction.js"],"sourcesContent":["import '../assets/css/FormFrame.css'; // import the CSS file\r\n\r\nconst FormFrame = (props) => {\r\n        return (\r\n                <>\r\n                        <div className=\"form-frame-container\">\r\n                                <div className=\"form-frame\">\r\n                                        {props.children}\r\n                                </div>\r\n                        </div>\r\n                </>\r\n        );\r\n}\r\n\r\nexport default FormFrame;\r\n","const breads = [\r\n        {\r\n                details: {\r\n                        productName: 'לחם לבן/שחור/חלה/חי',\r\n                        value: 1,\r\n                        gram: 30,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(פרוסה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: true,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'לחם דל קלוריות',\r\n                        value: 2,\r\n                        measure: '(פרוסה)',\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(פרוסה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'לחמנייה קטנה',\r\n                        value: 0.5,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(לחמנייה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'לחמנייה גדולה',\r\n                        value: 0.25,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(לחמנייה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'מצה רגילה',\r\n                        value: 0.5,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(מצה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'מצה קלה',\r\n                        value: 1,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(מצה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'פת מצה',\r\n                        value: 2,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(מצה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'פיתה רגילה',\r\n                        value: 0.33333,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(פיתה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'פיתה גדולה',\r\n                        value: 0.25,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(פיתה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'פיתה ביס',\r\n                        value: 1,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(פיתה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'פריכיות אורז',\r\n                        value: 3,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(פריכית)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'פתית/לחמית',\r\n                        value: 2,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(לחמית)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'בייגלה עגול',\r\n                        value: 0.25,\r\n                        gram: 0,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(בייגלה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                },\r\n        },\r\n];\r\nexport default breads;  ","// import react state\r\nimport { useState, useEffect } from 'react';\r\n// import service \r\nimport breads from '../../services/Grains&Bakery/breads';\r\n// import variables \r\nimport { variables, userAgent } from '../variables';\r\n// import container \r\nimport FormFrame from '../FormFrame';\r\n// import css\r\nimport '../../assets/css/basic.css';\r\n\r\nconst Breads = () => {\r\n        // Use userAgent to manipulate in order to use different elements in different browsers\r\n        const isFirefox = userAgent.isFirefox;\r\n        const isSafari = userAgent.isSafari;\r\n\r\n        // array of type calculation\r\n        const types = ['כמות', 'גרם'];\r\n\r\n        // My states \r\n        const [products] = useState(breads);\r\n        const [productName, setProductName] = useState(breads[0]['details']['productName']);\r\n        const [productType, setProductType] = useState(types[0]);\r\n        const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n        const [productAmount, setProductAmount] = useState(1);\r\n        const [result, setResult] = useState('');\r\n\r\n        // Get the product object \r\n        const product = products.find(product => product?.details?.productName === productName);\r\n        // Get array of type\r\n        const type = types.find(type => type === productType);\r\n\r\n        useEffect(() => {\r\n                // Add event listener on mount\r\n                window.addEventListener('resize', handleResize);\r\n\r\n                // Clean up the event listener on unmount\r\n                return () => {\r\n                        window.removeEventListener('resize', handleResize);\r\n                };\r\n        }, []);\r\n\r\n        // My handlers\r\n        const calculateValue = (productName, amount, productType) => {\r\n                // Calculate count \r\n                const count = (amount / product?.details?.value).toLocaleString(variables?.numberFormat);\r\n                // Calculate gram \r\n                const gram = (amount / product?.details?.gram).toLocaleString(variables?.numberFormat);\r\n\r\n                // Match count with NEGLIGIBLE_NUMBER\r\n                const calculationCountFraction = ` ${count}`;\r\n                // Calculate count reasult using toFraction \r\n                const calculationCount = ` ${variables?.fractionCalculation(count)}`;\r\n\r\n                // Match gram with NEGLIGIBLE_NUMBER\r\n                const calculationGramFraction = ` ${gram}`;\r\n                // Calculate gram reasult using toFraction \r\n                const calculationGram = ` ${variables?.fractionCalculation(gram)}`;\r\n\r\n                if (product && type) {\r\n                        if (product?.check?.gram) {\r\n                                return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount\r\n                                        : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGram\r\n                                                : 'זניח';\r\n                        }\r\n                        else {\r\n                                return productType === types[1] ? ` לא ניתן לבצע חישוב לפי גרמים לערך ${productName} `\r\n                                        : calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount\r\n                                                : 'זניח';\r\n                        }\r\n                }\r\n                else {\r\n                        return alert(variables.stringAlert);\r\n                }\r\n        }\r\n\r\n        const handleProduct = (event) => {\r\n                setProductName(event.target.value);\r\n        };\r\n\r\n        const handleAmount = (event) => {\r\n                setProductAmount(event.target.value);\r\n        };\r\n\r\n        const handleProductType = (event) => {\r\n                setProductType(event.target.value);\r\n        };\r\n\r\n        const handleResize = () => {\r\n                setViewportWidth(window.innerWidth);\r\n        };\r\n\r\n        // Clean input field when click it \r\n        const handleClear = (event) => {\r\n                event.target.value = \"\";\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n                // Prevent reload the page\r\n                e.preventDefault();\r\n                try {\r\n                        setResult(calculateValue(productName, productAmount, productType));\r\n                }\r\n                catch (err) {\r\n                        console.log(err.message);\r\n                        setResult(variables.stringResult);\r\n                }\r\n        };\r\n\r\n        return (\r\n                <>\r\n                        <FormFrame>\r\n                                <form onSubmit={handleSubmit}>\r\n                                        <h1>לחמים</h1>\r\n                                        <label>\r\n                                                חישוב לפי כמות או גרמים:\r\n                                                {viewportWidth <= 600 || isSafari ? (\r\n                                                        <select\r\n                                                                name='productType'\r\n                                                                value={productType}\r\n                                                                onChange={handleProductType}\r\n                                                        >\r\n                                                                {\r\n                                                                        types.map((type) => (\r\n                                                                                <option key={type} name=\"productType\" value={type}>\r\n                                                                                        {type}\r\n                                                                                </option>\r\n                                                                        ))\r\n                                                                }\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <>\r\n                                                                <input list=\"productType\"\r\n                                                                        defaultValue={productType}\r\n                                                                        onChange={handleProductType}\r\n                                                                        onClick={handleClear}\r\n                                                                        onFocus={handleClear}\r\n                                                                />\r\n                                                                <datalist id=\"productType\">\r\n                                                                        {\r\n                                                                                types.map((type) => (\r\n                                                                                        <option key={type} name=\"productType\" value={type}>\r\n                                                                                                {type}\r\n                                                                                        </option>\r\n                                                                                ))\r\n                                                                        }\r\n                                                                </datalist>\r\n                                                        </>\r\n                                                )}\r\n                                        </label>\r\n                                        <br />\r\n                                        <label htmlFor=\"productAmount\">\r\n                                                כמות נאכלת:\r\n                                                <input\r\n                                                        name='productAmount'\r\n                                                        type=\"number\"\r\n                                                        id=\"productAmount\"\r\n                                                        min=\"0\"\r\n                                                        max=\"1000\"\r\n                                                        step=\"any\"\r\n                                                        value={productAmount}\r\n                                                        onChange={handleAmount}\r\n                                                />\r\n                                        </label>\r\n                                        <br />\r\n                                        <label>\r\n                                                סוג הלחם:\r\n                                                {viewportWidth <= 600 || isSafari ? (\r\n                                                        <select\r\n                                                                value={productName}\r\n                                                                onChange={handleProduct}\r\n                                                        >\r\n                                                                {products.map((product) => {\r\n                                                                        const shouldShowOption = (product?.check?.gram && productType === types[1])\r\n                                                                                || productType === types[0];\r\n                                                                        return shouldShowOption ? (\r\n                                                                                <option\r\n                                                                                        key={product?.details?.productName}\r\n                                                                                        value={product?.details?.productName}\r\n                                                                                >\r\n                                                                                        {\r\n                                                                                                productType === types[0]\r\n                                                                                                        ? `${product?.details?.productName} ${product?.unit?.measureString}`\r\n                                                                                                        : `${product?.details?.productName} ${product?.unit?.gramString}`\r\n                                                                                        }\r\n                                                                                </option>\r\n                                                                        ) : null;\r\n                                                                })}\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <>\r\n                                                                <input list=\"productName\"\r\n                                                                        defaultValue={productName}\r\n                                                                        onChange={handleProduct}\r\n                                                                        onClick={handleClear}\r\n                                                                        onFocus={handleClear}\r\n                                                                />\r\n                                                                <datalist id=\"productName\">\r\n                                                                        {\r\n                                                                                !isFirefox && products.map((product) => (\r\n                                                                                        <option\r\n                                                                                                key={product?.details?.productName}\r\n                                                                                                name=\"productName\"\r\n                                                                                                value={product?.check?.gram && productType === types[1] ? product?.details?.productName\r\n                                                                                                        : productType === types[0] ? product?.details?.productName\r\n                                                                                                                : ''}>\r\n                                                                                                {productType === types[0] ? product?.unit?.measureString : product?.unit?.gramString}\r\n                                                                                        </option>\r\n                                                                                ))\r\n                                                                        }\r\n                                                                        {\r\n                                                                                isFirefox && products.map((product) => {\r\n                                                                                        const shouldShowOption = (product?.check?.gram && productType === types[1])\r\n                                                                                                || productType === types[0];\r\n                                                                                        return shouldShowOption ? (\r\n                                                                                                <option\r\n                                                                                                        key={product?.details?.productName}\r\n                                                                                                        value={product?.details?.productName}\r\n                                                                                                >\r\n                                                                                                        {\r\n                                                                                                                productType === types[0]\r\n                                                                                                                        ? `${product?.details?.productName} ${product?.unit?.measureString}`\r\n                                                                                                                        : `${product?.details?.productName} ${product?.unit?.gramString}`\r\n                                                                                                        }\r\n                                                                                                </option>\r\n                                                                                        ) : null;\r\n                                                                                })\r\n                                                                        }\r\n                                                                </datalist>\r\n                                                        </>\r\n                                                )}\r\n                                        </label>\r\n                                        <br /><br />\r\n                                        <div className='div1'>\r\n                                                מספר מנות:\r\n                                                <p className='result'>{result}</p>\r\n                                        </div>\r\n                                        <button type=\"submit\">חשב</button>\r\n                                </form >\r\n                        </FormFrame>\r\n                </>\r\n        );\r\n}\r\nexport default Breads;","// Library that parse decimals into fractions\r\nimport { toFraction } from 'fraction-parser';\r\n\r\nexport const variables = {\r\n  // use for toLocaleString\r\n  numberFormat: { minimumFractionDigits: 2, maximumFractionDigits: 2 },\r\n  // use for toFraction\r\n  fractionFormat: { useUnicodeVulgar: true },\r\n  fractionCalculation: (variable) =>\r\n    toFraction(Number(variable) || 0, variables.fractionFormat),\r\n  NEGLIGIBLE_NUMBER: 0.25,\r\n  stringResult: 'קיימת בעיה, במקרה והיא חוזרת אנא פנה לבונה האתר',\r\n  stringAlert: 'הערך שהוזן אינו קיים',\r\n};\r\n\r\nexport const userAgent = {\r\n  isFirefox: navigator.userAgent.toLowerCase().includes('firefox'),\r\n  isSafari: /^((?!chrome|android).)*safari/i.test(navigator.userAgent),\r\n};\r\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar numberLookupMap_1 = __importDefault(require(\"./numberLookupMap\"));\n// get the closest vulgar fraction from a decimal\nvar getClosestLookupNumber = function (value) {\n    var closest = 0;\n    var difference = 1;\n    Object.keys(numberLookupMap_1.default).forEach(function (key) {\n        var decimal = parseFloat(key);\n        var newDifference = Math.abs(value - decimal);\n        if (newDifference < difference) {\n            difference = newDifference;\n            closest = decimal;\n        }\n    });\n    return closest;\n};\nexports.default = getClosestLookupNumber;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar numberLookupMap = {\n    0.1: {\n        vulgar: '⅒',\n        fraction: '1/10',\n    },\n    0.11: {\n        vulgar: '⅑',\n        fraction: '1/9',\n    },\n    0.12: {\n        vulgar: '⅛',\n        fraction: '1/8',\n    },\n    0.14: {\n        vulgar: '⅐',\n        fraction: '1/7',\n    },\n    0.16: {\n        vulgar: '⅙',\n        fraction: '1/6',\n    },\n    0.2: {\n        vulgar: '⅕',\n        fraction: '1/5',\n    },\n    0.25: {\n        vulgar: '¼',\n        fraction: '1/4',\n    },\n    0.33: {\n        vulgar: '⅓',\n        fraction: '1/3',\n    },\n    0.37: {\n        vulgar: '⅜',\n        fraction: '3/8',\n    },\n    0.4: {\n        vulgar: '⅖',\n        fraction: '2/5',\n    },\n    0.5: {\n        vulgar: '½',\n        fraction: '1/2',\n    },\n    0.6: {\n        vulgar: '⅗',\n        fraction: '3/5',\n    },\n    0.62: {\n        vulgar: '⅝',\n        fraction: '5/8',\n    },\n    0.66: {\n        vulgar: '⅔',\n        fraction: '2/3',\n    },\n    0.75: {\n        vulgar: '¾',\n        fraction: '3/4',\n    },\n    0.8: {\n        vulgar: '⅘',\n        fraction: '4/5',\n    },\n    0.83: {\n        vulgar: '⅚',\n        fraction: '5/6',\n    },\n    0.87: {\n        vulgar: '⅞',\n        fraction: '7/8',\n    },\n};\nexports.default = numberLookupMap;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toDecimal = exports.toFraction = void 0;\nvar toFraction_1 = require(\"./toFraction\");\nObject.defineProperty(exports, \"toFraction\", { enumerable: true, get: function () { return __importDefault(toFraction_1).default; } });\nvar toDecimal_1 = require(\"./toDecimal\");\nObject.defineProperty(exports, \"toDecimal\", { enumerable: true, get: function () { return __importDefault(toDecimal_1).default; } });\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar numberLookupMap_1 = __importDefault(require(\"./helpers/numberLookupMap\"));\n// function that takes a unicode vulgar or a fraction and returns a decimal\nvar toDecimal = function (value) {\n    if (typeof value === 'number') {\n        return value;\n    }\n    if (value === '' || value === undefined || value === null) {\n        return 0;\n    }\n    var _a = value.split(' '), int = _a[0], fraction = _a[1];\n    if (fraction === undefined || fraction === '') {\n        return parseFloat(int);\n    }\n    var decimal = Object.keys(numberLookupMap_1.default).find(function (key) { return numberLookupMap_1.default[key].vulgar === fraction || numberLookupMap_1.default[key].fraction === fraction; }) || fraction;\n    return parseFloat(int) + parseFloat(decimal);\n};\nexports.default = toDecimal;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar numberLookupMap_1 = __importDefault(require(\"./helpers/numberLookupMap\"));\nvar getClosestLookupNumber_1 = __importDefault(require(\"./helpers/getClosestLookupNumber\"));\n// functions that returns a string representation of a fraction from a number\nvar toFraction = function (decimal, _a) {\n    var _b = _a.useUnicodeVulgar, useUnicodeVulgar = _b === void 0 ? true : _b;\n    // if the number is a whole number, return it as a string\n    if (decimal % 1 === 0) {\n        return decimal.toString();\n    }\n    var decimalPortion = (decimal - Math.floor(decimal)).toFixed(2);\n    var numberPortion = Math.trunc(decimal);\n    numberPortion = numberPortion === 0 ? '' : \"\".concat(numberPortion, \" \");\n    // if the number is a decimal, return it as a fraction\n    if (useUnicodeVulgar) {\n        return \"\".concat(numberPortion).concat(numberLookupMap_1.default[(0, getClosestLookupNumber_1.default)(decimalPortion)].vulgar);\n    }\n    return \"\".concat(numberPortion).concat(numberLookupMap_1.default[(0, getClosestLookupNumber_1.default)(decimalPortion)].fraction);\n};\nexports.default = toFraction;\n"],"names":["props","_jsx","_Fragment","children","className","details","productName","value","gram","unit","gramString","measureString","check","count","measure","Breads","isFirefox","userAgent","isSafari","types","products","useState","breads","setProductName","productType","setProductType","viewportWidth","setViewportWidth","window","innerWidth","productAmount","setProductAmount","result","setResult","product","find","_product$details","type","useEffect","addEventListener","handleResize","removeEventListener","handleProduct","event","target","handleProductType","handleClear","FormFrame","_jsxs","onSubmit","e","preventDefault","calculateValue","amount","_product$details2","_product$details3","toLocaleString","variables","numberFormat","calculationCountFraction","concat","calculationCount","fractionCalculation","calculationGramFraction","calculationGram","_product$check","NEGLIGIBLE_NUMBER","alert","stringAlert","err","console","log","message","stringResult","name","onChange","map","list","defaultValue","onClick","onFocus","id","htmlFor","min","max","step","_product$check2","_product$details4","_product$details5","_product$details6","_product$unit","_product$details7","_product$unit2","_product$details8","_product$check3","_product$details9","_product$details10","_product$unit3","_product$unit4","_product$check4","_product$details11","_product$details12","_product$details13","_product$unit5","_product$details14","_product$unit6","minimumFractionDigits","maximumFractionDigits","fractionFormat","useUnicodeVulgar","variable","toFraction","Number","navigator","toLowerCase","includes","test","__importDefault","this","mod","__esModule","Object","defineProperty","exports","numberLookupMap_1","require","closest","difference","keys","default","forEach","key","decimal","parseFloat","newDifference","Math","abs","vulgar","fraction","toDecimal","toFraction_1","enumerable","get","toDecimal_1","undefined","_a","split","int","getClosestLookupNumber_1","_b","toString","decimalPortion","floor","toFixed","numberPortion","trunc"],"sourceRoot":""}