{"version":3,"file":"static/js/597.bed4b1e9.chunk.js","mappings":"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","sources":["components/FormFrame.jsx","services/LowFatMilk/lowFatMilk.js","components/LowFatMilk/LowFatMilk.jsx","components/variables.js"],"sourcesContent":["import '../assets/css/FormFrame.css'; // import the CSS file\r\n\r\nconst FormFrame = (props) => {\r\n        return (\r\n                <>\r\n                        <div className=\"form-frame-container\">\r\n                                <div className=\"form-frame\">\r\n                                        {props.children}\r\n                                </div>\r\n                        </div>\r\n                </>\r\n        );\r\n}\r\n\r\nexport default FormFrame;\r\n","const lowFatMilk = [\r\n  {\r\n    details: {\r\n      productName: `גבינה לבנה/קוטג' (0.5%)`,\r\n      value1: 6,\r\n      value2: 0,\r\n      gram: 120,\r\n      message: ' .דל בפחמימות ומכיל יותר חלבון (80 קלוריות) *',\r\n    },\r\n    unit: {\r\n      gramString: '(גרם)',\r\n      measureString: '(כף)',\r\n      measures: ['כף', ''],\r\n    },\r\n    check: {\r\n      message: true,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'גבינה צהובה לייט',\r\n      value1: 2,\r\n      value2: 0,\r\n      gram: 40,\r\n      message: '.דל בפחמימות ומכיל יותר חלבון (80 קלוריות) *',\r\n    },\r\n    unit: {\r\n      gramString: '(גרם)',\r\n      measureString: '(פרוסה)',\r\n      measures: ['פרוסה', ''],\r\n    },\r\n    check: {\r\n      message: true,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'חלב דל שומן (0-1%)',\r\n      value1: 1,\r\n      value2: 0,\r\n      gram: 200,\r\n      message: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(כוס)',\r\n      measures: ['כוס', ''],\r\n    },\r\n    check: {\r\n      message: false,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'יוגורט בטעם פירות מסוג דיאט',\r\n      value1: 1,\r\n      value2: 1,\r\n      gram: 170,\r\n      message: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע/כוס)',\r\n      measures: ['גביע', 'כוס'],\r\n    },\r\n    check: {\r\n      message: false,\r\n      value: true,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'יוגורט/קפיר דל שומן (1.5%)',\r\n      value1: 1,\r\n      value2: 1,\r\n      gram: 170,\r\n      message: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע/כוס)',\r\n      measures: ['גביע', 'כוס'],\r\n    },\r\n    check: {\r\n      message: false,\r\n      value: true,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'לבן כחוש (1.5%)',\r\n      value1: 1,\r\n      value2: 1,\r\n      gram: 170,\r\n      message: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע/כוס)',\r\n      measures: ['גביע', 'כוס'],\r\n    },\r\n    check: {\r\n      message: false,\r\n      value: true,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'שוקו דיאט',\r\n      value1: 1.25,\r\n      value2: 0,\r\n      gram: 250,\r\n      message: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(כוס)',\r\n      measures: ['כוס', ''],\r\n    },\r\n    check: {\r\n      message: false,\r\n      value: false,\r\n    },\r\n  },\r\n];\r\nexport default lowFatMilk;\r\n","// import react states\r\nimport { useState, useEffect } from 'react';\r\n// import from react-select\r\nimport Select from 'react-select';\r\n// import service \r\nimport lowFatMilk from '../../services/LowFatMilk/lowFatMilk';\r\n// import variables \r\nimport { variables, getMaxHeight } from '../variables';\r\n// import container \r\nimport FormFrame from '../FormFrame';\r\n// import css\r\nimport '../../assets/css/basic.css';\r\n\r\nconst LowFatMilk = () => {\r\n        // array of type calculation\r\n        const types = ['כמות', 'גרם'];\r\n\r\n        // My states  \r\n        const [products] = useState(lowFatMilk);\r\n        const [productName, setProductName] = useState(lowFatMilk[0]['details']['productName']);\r\n        const [productType, setProductType] = useState(types[0]);\r\n        const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n        // Get the product object \r\n        const product = products.find(product => product?.details?.productName === productName);\r\n        const [productAmount, setProductAmount] = useState(1);\r\n        const [result, setResult] = useState('');\r\n        const [flag, setFlag] = useState(false);\r\n        // Get array of type\r\n        const type = types.find(type => type === productType);\r\n\r\n        useEffect(() => {\r\n                // Add event listener on mount\r\n                window.addEventListener('resize', handleResize);\r\n\r\n                // Clean up the event listener on unmount\r\n                return () => {\r\n                        window.removeEventListener('resize', handleResize);\r\n                };\r\n        }, []);\r\n\r\n        // My handlers\r\n        const calculateValue = (amount, productType, productValues) => {\r\n                // Calculate count \r\n                const count = (amount / product?.details?.value1).toLocaleString(variables?.numberFormat);\r\n                // Calculate countValue2 \r\n                const countValue2 = (amount / product?.details?.value2).toLocaleString(variables?.numberFormat);\r\n                // Calculate gram \r\n                const gram = (amount / product?.details?.gram).toLocaleString(variables?.numberFormat);\r\n                // Calculate message \r\n                const message = product?.details?.message;\r\n\r\n                // Match count with NEGLIGIBLE_NUMBER\r\n                const calculationCountFraction = ` ${count}`;\r\n                // Calculate count reasult using toFraction \r\n                const calculationCount = ` ${variables?.fractionCalculation(count)}`;\r\n                // Calculate count message reasult using toFraction \r\n                const calculationCountMessage = ` ${variables?.fractionCalculation(count)}\\n ${message}`;\r\n\r\n                // Match gram with NEGLIGIBLE_NUMBER\r\n                const calculationGramFraction = ` ${gram}`;\r\n                // Calculate gram reasult using toFraction \r\n                const calculationGram = ` ${variables?.fractionCalculation(gram)}`;\r\n                // Calculate gram message reasult using toFraction \r\n                const calculationGramMessage = ` ${variables?.fractionCalculation(gram)}\\n ${message}`;\r\n\r\n                if (isNaN(productAmount)) {\r\n                        return alert(variables.stringProductAmount);\r\n                }\r\n                if (product && type) {\r\n                        if (product?.check?.message) {\r\n                                return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCountMessage\r\n                                        : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGramMessage\r\n                                                : ' זניח';\r\n                        }\r\n                        else {\r\n                                return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount\r\n                                        : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGram\r\n                                                : 'זניח';\r\n                        }\r\n                }\r\n                else {\r\n                        return alert(variables.stringAlert);\r\n                }\r\n        };\r\n\r\n        const handleProduct = (event) => {\r\n                setProductName(event.target.value);\r\n        };\r\n\r\n        const handleProductPC = (selectedOption) => {\r\n                setProductName(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleAmount = (event) => {\r\n                setProductAmount(event.target.value);\r\n        };\r\n\r\n        const handleProductType = (event) => {\r\n                setProductType(event.target.value);\r\n        };\r\n\r\n        const handleProductTypePC = (selectedOption) => {\r\n                setProductType(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleResize = () => {\r\n                setViewportWidth(window.innerWidth);\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n                // Prevent reload the page\r\n                e.preventDefault();\r\n                try {\r\n                        setResult(calculateValue(productAmount, productType));\r\n                        setFlag(true);\r\n                }\r\n                catch (err) {\r\n                        console.log(err.message);\r\n                        setResult(variables.stringResult);\r\n                }\r\n        };\r\n\r\n        const productsOptions = products.map((product) => ({\r\n                value: product?.details?.productName,\r\n                label:\r\n                        productType === types[0]\r\n                                ? `${product?.details?.productName} ${product?.unit?.measureString}`\r\n                                : `${product?.details?.productName} ${product?.unit?.gramString}`,\r\n        }));\r\n\r\n        const typesOptions = types.map((type) => ({\r\n                value: type,\r\n                label: type\r\n        }));\r\n\r\n        return (\r\n                <>\r\n                        <FormFrame>\r\n                                <form onSubmit={handleSubmit}>\r\n                                        <h1>חלב דל שומן</h1>\r\n                                        <label id='productType'>\r\n                                                חישוב לפי כמות או גרמים:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                id='productType'\r\n                                                                name='productType'\r\n                                                                value={productType}\r\n                                                                onChange={handleProductType}\r\n                                                        >\r\n                                                                {\r\n                                                                        types.map((type) => (\r\n                                                                                <option key={type} name=\"productType\" value={type}>\r\n                                                                                        {type}\r\n                                                                                </option>\r\n                                                                        ))\r\n                                                                }\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                id='productType'\r\n                                                                name='productType'\r\n                                                                options={typesOptions}\r\n                                                                isSearchable\r\n                                                                isClearable\r\n                                                                noOptionsMessage={() => variables.stringSelectProductTypeNoOptionsMessage}\r\n                                                                placeholder={variables.stringSelect}\r\n                                                                value={typesOptions.find((option) => option.value === productType)}\r\n                                                                onChange={handleProductTypePC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <label htmlFor=\"productAmount\">\r\n                                                כמות נצרכת:\r\n                                                <input\r\n                                                        name='productAmount'\r\n                                                        type=\"number\"\r\n                                                        id=\"productAmount\"\r\n                                                        min=\"0\"\r\n                                                        max=\"1000\"\r\n                                                        step=\"any\"\r\n                                                        value={productAmount}\r\n                                                        onChange={handleAmount}\r\n                                                />\r\n                                        </label>\r\n                                        <label>\r\n                                                סוג המוצר:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                value={productName}\r\n                                                                onChange={handleProduct}\r\n                                                        >\r\n                                                                {products.map((product) => (\r\n                                                                        <option key={product?.details?.productName} value={product?.details?.productName}>\r\n                                                                                {productType === types[0] ? `${product?.details?.productName} ${product?.unit?.measureString}` : `${product?.details?.productName} ${product?.unit?.gramString}`}\r\n                                                                        </option>\r\n                                                                ))}\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                styles={{\r\n                                                                        menu: (provided) => ({\r\n                                                                                ...provided,\r\n                                                                                maxHeight: getMaxHeight(viewportWidth),\r\n                                                                                overflowY: 'auto',\r\n                                                                        }),\r\n                                                                }}\r\n                                                                options={productsOptions}\r\n                                                                isSearchable\r\n                                                                isClearable\r\n                                                                noOptionsMessage={() => variables.stringSelectProductNameNoOptionsMessage}\r\n                                                                placeholder={variables.stringSelect}\r\n                                                                value={productsOptions.find((option) => option.value === productName)}\r\n                                                                onChange={handleProductPC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <div className='div-result div-result-pc'>\r\n                                                {flag === true && 'מספר מנות:'}\r\n                                                <div className='result'>{result}</div>\r\n                                        </div>\r\n                                        <button type=\"submit\">חשב</button>\r\n                                </form >\r\n                        </FormFrame>\r\n                </>\r\n        );\r\n};\r\n\r\nexport default LowFatMilk;","// Library that parse decimals into fractions\r\nimport { toFraction } from 'fraction-parser';\r\n\r\nexport const variables = {\r\n  // Use for toLocaleString\r\n  numberFormat: { minimumFractionDigits: 2, maximumFractionDigits: 2 },\r\n  // Use for toFraction\r\n  fractionFormat: { useUnicodeVulgar: true },\r\n  fractionCalculation: (variable) =>\r\n    toFraction(Number(variable) || 0, variables.fractionFormat),\r\n  NEGLIGIBLE_NUMBER: 0.25, // זניח\r\n  stringResult: 'קיימת בעיה, במקרה והיא חוזרת אנא פנה לבונה האתר',\r\n  stringAlert: 'נא לבחור פריט מן הרשימה',\r\n  stringProductAmount: 'יש להזין מספר',\r\n  stringSelect: 'יש ללחוץ על מנת לבחור...',\r\n  stringSelectProductTypeNoOptionsMessage: 'ניתן לחשב רק באמצעות כמות או גרם',\r\n  stringSelectProductNameNoOptionsMessage: 'הפריט לא נמצא ברשימה',\r\n};\r\n\r\n// Use for select-react dropdown list\r\nexport const getMaxHeight = (viewportWidth) => {\r\n  const maxHeightOptions = {\r\n    2560: 'none',\r\n    2400: '295px',\r\n    1745.45: '180px',\r\n    1536: '150px',\r\n  };\r\n\r\n  const viewportKeys = Object.keys(maxHeightOptions)\r\n    .map(parseFloat)\r\n    .sort((a, b) => b - a);\r\n\r\n  const selectedMaxHeight = viewportKeys.find(\r\n    (width) => viewportWidth >= width\r\n  );\r\n\r\n  return selectedMaxHeight ? maxHeightOptions[selectedMaxHeight] : 'none';\r\n};\r\n"],"names":["props","className","children","details","productName","value1","value2","gram","message","unit","gramString","measureString","measures","check","value","types","useState","lowFatMilk","products","setProductName","productType","setProductType","window","innerWidth","viewportWidth","setViewportWidth","product","find","productAmount","setProductAmount","result","setResult","flag","setFlag","type","useEffect","addEventListener","handleResize","removeEventListener","productsOptions","map","label","typesOptions","FormFrame","onSubmit","e","preventDefault","amount","productValues","count","toLocaleString","variables","numberFormat","calculationCountFraction","calculationCount","fractionCalculation","calculationCountMessage","calculationGramFraction","calculationGram","calculationGramMessage","isNaN","alert","stringProductAmount","NEGLIGIBLE_NUMBER","stringAlert","calculateValue","err","console","log","stringResult","id","name","onChange","event","target","options","isSearchable","isClearable","noOptionsMessage","stringSelectProductTypeNoOptionsMessage","placeholder","stringSelect","option","selectedOption","htmlFor","min","max","step","styles","menu","provided","maxHeight","getMaxHeight","overflowY","stringSelectProductNameNoOptionsMessage","minimumFractionDigits","maximumFractionDigits","fractionFormat","useUnicodeVulgar","variable","toFraction","Number","maxHeightOptions","selectedMaxHeight","Object","keys","parseFloat","sort","a","b","width"],"sourceRoot":""}