{"version":3,"file":"static/js/866.bcf71352.chunk.js","mappings":"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","sources":["components/FormFrame.jsx","services/Milk/milk.js","components/Milk/Milk.jsx","components/variables.js"],"sourcesContent":["import '../assets/css/FormFrame.css'; // import the CSS file\r\n\r\nconst FormFrame = (props) => {\r\n        return (\r\n                <>\r\n                        <div className=\"form-frame-container\">\r\n                                <div className=\"form-frame\">\r\n                                        {props.children}\r\n                                </div>\r\n                        </div>\r\n                </>\r\n        );\r\n}\r\n\r\nexport default FormFrame;\r\n","const milk = [\r\n  {\r\n    details: {\r\n      productName: 'גבינה מותכת',\r\n      value1: 2,\r\n      value2: 0,\r\n      gram: 60,\r\n      sugar: 0,\r\n      message: '.דל בפחמימות ומכיל יותר חלבון ו/או שומן (120 קלוריות) *',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(גרם)',\r\n      measureString: '(משולש)',\r\n      measures: ['משולש', ''],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: false,\r\n      message: true,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'גבינה צהובה (22%)',\r\n      value1: 2,\r\n      value2: 0,\r\n      gram: 40,\r\n      sugar: 0,\r\n      message: '.דל בפחמימות ומכיל יותר חלבון ו/או שומן (120 קלוריות) *',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(גרם)',\r\n      measureString: '(פרוסה)',\r\n      measures: ['פרוסה', ''],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: false,\r\n      message: true,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'גבינה מלוחה (16%)',\r\n      value1: 0,\r\n      value2: 0,\r\n      gram: 60,\r\n      sugar: 0,\r\n      message: '.דל בפחמימות ומכיל יותר חלבון ו/או שומן (120 קלוריות) *',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(גרם)',\r\n      measureString: '',\r\n      measures: ['-', ''],\r\n    },\r\n    check: {\r\n      count: false,\r\n      gram: true,\r\n      sugar: false,\r\n      message: true,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: `גבינה לבנה/קוטג' (5%)`,\r\n      value1: 0.5,\r\n      value2: 5,\r\n      gram: 125,\r\n      sugar: 0,\r\n      message: '.דל בפחמימות ומכיל יותר חלבון ו/או שומן (120 קלוריות) *',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(גרם)',\r\n      measureString: '(חבילה/כף)',\r\n      measures: ['חצי חבילה', 'כף'],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: false,\r\n      message: true,\r\n      value: true,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'חלב (3% שומן)',\r\n      value1: 1,\r\n      value2: 0,\r\n      gram: 200,\r\n      sugar: 0,\r\n      message: '',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(כוס)',\r\n      measures: ['כוס', ''],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: false,\r\n      message: false,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'יוגורט (3%)',\r\n      value1: 1,\r\n      value2: 0,\r\n      gram: 170,\r\n      sugar: 0,\r\n      message: '',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע קטן)',\r\n      measures: ['גביע קטן', ''],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: false,\r\n      message: false,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'יוגורט/קפיר',\r\n      value1: 1,\r\n      value2: 1,\r\n      gram: 170,\r\n      sugar: 0,\r\n      message: '',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע/כוס)',\r\n      measures: ['גביע', 'כוס'],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: false,\r\n      message: false,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'לבן (3% שומן)',\r\n      value1: 1,\r\n      value2: 1,\r\n      gram: 170,\r\n      sugar: 0,\r\n      message: '',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע/כוס)',\r\n      measures: ['גביע', 'כוס'],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: false,\r\n      message: false,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'לבנה (4.5% שומן)',\r\n      value1: 1,\r\n      value2: 0.75,\r\n      gram: 150,\r\n      sugar: 0,\r\n      message: '',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 0,\r\n      sugarCalculationGram: 0,\r\n      sugarString: '',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע קטן/כוס)',\r\n      measures: ['גביע קטן', 'כוס'],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: false,\r\n      message: false,\r\n      value: true,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'מעדן שוקולד/וניל',\r\n      value1: 1,\r\n      value2: 0,\r\n      gram: 125,\r\n      sugar: 1,\r\n      message: '',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 1,\r\n      sugarCalculationGram: 125,\r\n      sugarString: ' יש להוסיף מנות סוכר *',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע קטן)',\r\n      measures: ['גביע קטן', ''],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: true,\r\n      message: false,\r\n      value: false,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'פריגורט',\r\n      value1: 1,\r\n      value2: 0,\r\n      gram: 150,\r\n      sugar: 1,\r\n      message: '',\r\n    },\r\n    sugar: {\r\n      sugarCalculation: 1,\r\n      sugarCalculationGram: 150,\r\n      sugarString: ' יש להוסיף מנות סוכר *',\r\n    },\r\n    unit: {\r\n      gramString: '(מ\"ל)',\r\n      measureString: '(גביע)',\r\n      measures: ['גביע', ''],\r\n    },\r\n    check: {\r\n      count: true,\r\n      gram: true,\r\n      sugar: true,\r\n      message: false,\r\n      value: false,\r\n    },\r\n  },\r\n];\r\nexport default milk;\r\n","// import react states\r\nimport { useState, useEffect } from 'react';\r\n// import from react-select\r\nimport Select from 'react-select';\r\n// import service \r\nimport milk from '../../services/Milk/milk';\r\n// import variables \r\nimport { variables, getMaxHeight } from '../variables';\r\n// import container \r\nimport FormFrame from '../FormFrame';\r\n// import css\r\nimport '../../assets/css/basic.css';\r\n\r\nconst Milk = () => {\r\n        // array of type calculation\r\n        const types = ['כמות', 'גרם'];\r\n\r\n        // My states \r\n        const [products] = useState(milk);\r\n        const [productName, setProductName] = useState(milk[0]['details']['productName']);\r\n        const [productType, setProductType] = useState(types[0]);\r\n        const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n        // Get the product object \r\n        const product = products.find(product => product?.details?.productName === productName);\r\n        //  array of value calculation\r\n        const values = [product?.unit?.measures[0], product?.unit?.measures[1]];\r\n        const [productValues, setProductValues] = useState(values[0]);\r\n        const [productAmount, setProductAmount] = useState(1);\r\n        const [result, setResult] = useState('');\r\n        const [flag, setFlag] = useState(false);\r\n        // Get array of type\r\n        const type = types.find(type => type === productType);\r\n        // Get array of value\r\n        const value = values.find(value => value === productValues);\r\n\r\n        useEffect(() => {\r\n                if (values[0]) {\r\n                        setProductValues(values[0]);\r\n                }\r\n                else {\r\n                        setProductValues(values[1]);\r\n                }\r\n        }, [product]);\r\n\r\n        useEffect(() => {\r\n                // Add event listener on mount\r\n                window.addEventListener('resize', handleResize);\r\n\r\n                // Clean up the event listener on unmount\r\n                return () => {\r\n                        window.removeEventListener('resize', handleResize);\r\n                };\r\n        }, []);\r\n\r\n        // My handlers\r\n        const calculateValue = (productName, amount, productType, productValues) => {\r\n                // Calculate count \r\n                const count = (amount / product?.details?.value1).toLocaleString(variables?.numberFormat);\r\n                // Calculate countValue2 \r\n                const countValue2 = (amount / product?.details?.value2).toLocaleString(variables?.numberFormat);\r\n                // Calculate gram \r\n                const gram = (amount / product?.details?.gram).toLocaleString(variables?.numberFormat);\r\n                // Calculate message \r\n                const message = product?.details?.message;\r\n                // Calculate sugar \r\n                const sugar = (amount / product?.sugar?.sugarCalculation).toLocaleString(variables?.numberFormat);\r\n                // Calculate sugarGram \r\n                const sugarGram = (amount / product?.sugar?.sugarCalculationGram).toLocaleString(variables?.numberFormat);\r\n                // Calculate sugarString0 \r\n                const sugarString0 = `${product?.sugar?.sugarString.split(\" יש להוסיף \")[0]} יש להוסיף`;\r\n                // Calculate sugarString1 \r\n                const sugarString1 = product?.sugar?.sugarString.split(\" יש להוסיף \")[1];\r\n\r\n                // Match count with NEGLIGIBLE_NUMBER\r\n                const calculationCountFraction = ` ${count}`;\r\n                // Calculate count reasult using toFraction \r\n                const calculationCount = ` ${variables?.fractionCalculation(count)}`;\r\n                // Calculate count message reasult using toFraction \r\n                const calculationCountMessage = ` ${variables?.fractionCalculation(count)}\\n ${message}`;\r\n                // Calculate count Value2 message reasult using toFraction \r\n                const calculationCountValue2Message = ` ${variables?.fractionCalculation(countValue2)}\\n ${message}`;\r\n                // Calculate count sugar reasult using toFraction  \r\n                const calculationCountSugar = ` ${variables?.fractionCalculation(count)}\\n ${sugarString0} ${variables?.fractionCalculation(sugar)} ${sugarString1}`;\r\n                // Use to comparison count value with NEGLIGIBLE_NUMBER\r\n                const calculationCountValueFraction = ` ${countValue2}`;\r\n                // Calculate count value2 reasult using toFraction \r\n                const calculationCountValue2 = ` ${variables?.fractionCalculation(countValue2)}`;\r\n\r\n                // Match gram with NEGLIGIBLE_NUMBER\r\n                const calculationGramFraction = ` ${gram}`;\r\n                // Calculate gram reasult using toFraction \r\n                const calculationGram = ` ${variables?.fractionCalculation(gram)}`;\r\n                // Calculate gram sugar reasult using toFraction \r\n                const calculationGramSugar = ` ${variables?.fractionCalculation(gram)}\\n ${sugarString0} ${variables?.fractionCalculation(sugarGram)} ${sugarString1}`;\r\n                // Calculate gram message reasult using toFraction \r\n                const calculationGramMessage = ` ${variables?.fractionCalculation(gram)}\\n ${message}`;\r\n\r\n                if (isNaN(productAmount)) {\r\n                        return alert(variables.stringProductAmount);\r\n                }\r\n                if (product && type && value) {\r\n                        if (product?.check?.sugar) {\r\n                                return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCountSugar\r\n                                        : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGramSugar\r\n                                                : ' זניח';\r\n                        }\r\n                        else if (product?.check?.count && product?.check?.message && !product?.check?.value) {\r\n                                return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCountMessage\r\n                                        : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGramMessage\r\n                                                : ' זניח';\r\n                        }\r\n                        else if (!product?.check?.count && product?.check?.message) {\r\n                                return productType === types[0] ? ` לא ניתן לבצע חישוב לפי כמות לערך ${productName} `\r\n                                        : calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGramMessage\r\n                                                : 'זניח';\r\n                        }\r\n                        else if (product?.check?.value && product?.check?.message) {\r\n                                if (productType === types[0]) {\r\n                                        return productValues === values[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCountMessage\r\n                                                : productValues === values[1] && calculationCountValueFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCountValue2Message\r\n                                                        : ' זניח';\r\n                                }\r\n                                else {\r\n                                        return calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGramMessage : ' זניח';\r\n                                }\r\n                        }\r\n                        else if (product?.check?.value) {\r\n                                if (productType === types[0]) {\r\n                                        return productValues === values[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount\r\n                                                : productValues === values[1] && calculationCountValueFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCountValue2\r\n                                                        : ' זניח';\r\n                                }\r\n                                else {\r\n                                        return calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGram : ' זניח';\r\n                                }\r\n                        }\r\n                        else if (product?.check?.count) {\r\n                                return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount\r\n                                        : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGram\r\n                                                : 'זניח';\r\n                        }\r\n                        else {\r\n                                return productType === types[0] ? ` לא ניתן לבצע חישוב לפי כמות לערך ${productName} `\r\n                                        : calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGram\r\n                                                : 'זניח';\r\n                        }\r\n                }\r\n                else {\r\n                        return alert(variables.stringAlert);\r\n                }\r\n        };\r\n\r\n        const handleProduct = (event) => {\r\n                setProductName(event.target.value);\r\n        };\r\n\r\n        const handleProductPC = (selectedOption) => {\r\n                setProductName(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleAmount = (event) => {\r\n                setProductAmount(event.target.value);\r\n        };\r\n\r\n        const handleProductType = (event) => {\r\n                setProductType(event.target.value);\r\n        };\r\n\r\n        const handleProductTypePC = (selectedOption) => {\r\n                setProductType(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleProductValues = (event) => {\r\n                setProductValues(event.target.value);\r\n        };\r\n\r\n        const handleProductValuesPC = (selectedOption) => {\r\n                setProductValues(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleResize = () => {\r\n                setViewportWidth(window.innerWidth);\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n                // Prevent reload the page\r\n                e.preventDefault();\r\n                try {\r\n                        setResult(calculateValue(productName, productAmount, productType, productValues));\r\n                        setFlag(true);\r\n                }\r\n                catch (err) {\r\n                        console.log(err.message);\r\n                        setResult(variables.stringResult);\r\n                }\r\n        };\r\n\r\n        const productsOptions = products.map((product) => {\r\n                const shouldShowOption = (product?.check?.count && productType === types[0])\r\n                        || productType === types[1];\r\n\r\n                return shouldShowOption ? (\r\n                        {\r\n                                value: product?.details?.productName,\r\n                                label: productType === types[0]\r\n                                        ? `${product?.details?.productName} ${product?.unit?.measureString}`\r\n                                        : `${product?.details?.productName} ${product?.unit?.gramString}`\r\n                        }\r\n                ) : null;\r\n        });\r\n\r\n        const filteredProductsOptions = productsOptions.filter(option => option !== null);\r\n\r\n        const typesOptions = types.map((type) => ({\r\n                value: type,\r\n                label: type\r\n        }));\r\n\r\n        const valuesOptions = values.map((value) => ({\r\n                value: value || '',\r\n                label: value\r\n        }));\r\n\r\n        return (\r\n                <>\r\n                        <FormFrame>\r\n                                <form onSubmit={handleSubmit}>\r\n                                        <h1>חלב</h1>\r\n                                        <label id='productType'>\r\n                                                חישוב לפי כמות או גרמים:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                id='productType'\r\n                                                                name='productType'\r\n                                                                value={productType}\r\n                                                                onChange={handleProductType}\r\n                                                        >\r\n                                                                {\r\n                                                                        types.map((type) => (\r\n                                                                                <option key={type} name=\"productType\" value={type}>\r\n                                                                                        {type}\r\n                                                                                </option>\r\n                                                                        ))\r\n                                                                }\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                id='productType'\r\n                                                                name='productType'\r\n                                                                options={typesOptions}\r\n                                                                isSearchable\r\n                                                                isClearable\r\n                                                                noOptionsMessage={() => variables.stringSelectProductTypeNoOptionsMessage}\r\n                                                                placeholder={variables.stringSelect}\r\n                                                                value={typesOptions.find((option) => option.value === productType)}\r\n                                                                onChange={handleProductTypePC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <label htmlFor=\"productAmount\">\r\n                                                כמות נאכלת:\r\n                                                <input\r\n                                                        name='productAmount'\r\n                                                        type=\"number\"\r\n                                                        id=\"productAmount\"\r\n                                                        min=\"0\"\r\n                                                        max=\"1000\"\r\n                                                        step=\"any\"\r\n                                                        value={productAmount}\r\n                                                        onChange={handleAmount}\r\n                                                />\r\n                                        </label>\r\n                                        <label>\r\n                                                סוג מוצר החלב:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                value={productName}\r\n                                                                onChange={handleProduct}\r\n                                                        >\r\n                                                                {products.map((product) => {\r\n                                                                        const shouldShowOption = (product?.check?.count && productType === types[0])\r\n                                                                                || productType === types[1];\r\n                                                                        return shouldShowOption ? (\r\n                                                                                <option\r\n                                                                                        key={product?.details?.productName}\r\n                                                                                        value={product?.details?.productName}\r\n                                                                                >\r\n                                                                                        {\r\n                                                                                                productType === types[0]\r\n                                                                                                        ? `${product?.details?.productName} ${product?.unit?.measureString}`\r\n                                                                                                        : `${product?.details?.productName} ${product?.unit?.gramString}`\r\n                                                                                        }\r\n                                                                                </option>\r\n                                                                        ) : null;\r\n                                                                })}\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                styles={{\r\n                                                                        menu: (provided) => ({\r\n                                                                                ...provided,\r\n                                                                                maxHeight: getMaxHeight(viewportWidth),\r\n                                                                                overflowY: 'auto',\r\n                                                                        }),\r\n                                                                }}\r\n                                                                options={filteredProductsOptions}\r\n                                                                isSearchable\r\n                                                                isClearable\r\n                                                                noOptionsMessage={() => variables.stringSelectProductNameNoOptionsMessage}\r\n                                                                placeholder={variables.stringSelect}\r\n                                                                value={filteredProductsOptions.find((option) => option.value === productName)}\r\n                                                                onChange={handleProductPC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        {product?.check?.value === true && productType === types[0] && <div>\r\n                                                <label>\r\n                                                        בחירת סוג חישוב כמות\r\n                                                        {viewportWidth <= 600 ? (\r\n                                                                <select\r\n                                                                        value={productValues || ''}\r\n                                                                        onChange={handleProductValues}\r\n                                                                >\r\n                                                                        {\r\n                                                                                values.map((value) => (\r\n                                                                                        <option key={value} name=\"productValues\" value={value || ''}>\r\n                                                                                                {value}\r\n                                                                                        </option>\r\n                                                                                ))\r\n                                                                        }\r\n                                                                </select>\r\n                                                        ) : (\r\n\r\n                                                                <Select\r\n                                                                        options={valuesOptions}\r\n                                                                        isSearchable\r\n                                                                        isClearable\r\n                                                                        noOptionsMessage={() => variables.stringSelectProductNameNoOptionsMessage}\r\n                                                                        placeholder={variables.stringSelect}\r\n                                                                        value={valuesOptions.find((option) => option.value === productValues || '')}\r\n                                                                        onChange={handleProductValuesPC}\r\n                                                                />\r\n                                                        )}\r\n                                                </label>\r\n                                        </div>}\r\n                                        <div className='div-result div-result-pc'>\r\n                                                {flag === true && 'מספר מנות:'}\r\n                                                <div className='result'>{result}</div>\r\n                                        </div>\r\n                                        <button type=\"submit\">חשב</button>\r\n                                </form >\r\n                        </FormFrame >\r\n                </>\r\n        );\r\n};\r\n\r\nexport default Milk;","// Library that parse decimals into fractions\r\nimport { toFraction } from 'fraction-parser';\r\n\r\nexport const variables = {\r\n  // Use for toLocaleString\r\n  numberFormat: { minimumFractionDigits: 2, maximumFractionDigits: 2 },\r\n  // Use for toFraction\r\n  fractionFormat: { useUnicodeVulgar: true },\r\n  fractionCalculation: (variable) =>\r\n    toFraction(Number(variable) || 0, variables.fractionFormat),\r\n  NEGLIGIBLE_NUMBER: 0.25, // זניח\r\n  stringResult: 'קיימת בעיה, במקרה והיא חוזרת אנא פנה לבונה האתר',\r\n  stringAlert: 'נא לבחור פריט מן הרשימה',\r\n  stringProductAmount: 'יש להזין מספר',\r\n  stringSelect: 'יש ללחוץ על מנת לבחור...',\r\n  stringSelectProductTypeNoOptionsMessage: 'ניתן לחשב רק באמצעות כמות או גרם',\r\n  stringSelectProductNameNoOptionsMessage: 'הפריט לא נמצא ברשימה',\r\n};\r\n\r\n// Use for select-react dropdown list\r\nexport const getMaxHeight = (viewportWidth) => {\r\n  const maxHeightOptions = {\r\n    2560: 'none',\r\n    2400: '295px',\r\n    1745.45: '180px',\r\n    1536: '150px',\r\n  };\r\n\r\n  const viewportKeys = Object.keys(maxHeightOptions)\r\n    .map(parseFloat)\r\n    .sort((a, b) => b - a);\r\n\r\n  const selectedMaxHeight = viewportKeys.find(\r\n    (width) => viewportWidth >= width\r\n  );\r\n\r\n  return selectedMaxHeight ? maxHeightOptions[selectedMaxHeight] : 'none';\r\n};\r\n"],"names":["props","className","children","details","productName","value1","value2","gram","sugar","message","sugarCalculation","sugarCalculationGram","sugarString","unit","gramString","measureString","measures","check","count","value","types","useState","milk","products","setProductName","productType","setProductType","window","innerWidth","viewportWidth","setViewportWidth","product","find","values","productValues","setProductValues","productAmount","setProductAmount","result","setResult","flag","setFlag","type","useEffect","addEventListener","handleResize","removeEventListener","productsOptions","map","label","filteredProductsOptions","filter","option","typesOptions","valuesOptions","FormFrame","onSubmit","e","preventDefault","amount","toLocaleString","variables","numberFormat","countValue2","sugarGram","sugarString0","split","sugarString1","calculationCountFraction","calculationCount","fractionCalculation","calculationCountMessage","calculationCountValue2Message","calculationCountSugar","calculationCountValueFraction","calculationCountValue2","calculationGramFraction","calculationGram","calculationGramSugar","calculationGramMessage","isNaN","alert","stringProductAmount","NEGLIGIBLE_NUMBER","stringAlert","calculateValue","err","console","log","stringResult","id","name","onChange","event","target","options","isSearchable","isClearable","noOptionsMessage","stringSelectProductTypeNoOptionsMessage","placeholder","stringSelect","selectedOption","htmlFor","min","max","step","styles","menu","provided","maxHeight","getMaxHeight","overflowY","stringSelectProductNameNoOptionsMessage","minimumFractionDigits","maximumFractionDigits","fractionFormat","useUnicodeVulgar","variable","toFraction","Number","maxHeightOptions","selectedMaxHeight","Object","keys","parseFloat","sort","a","b","width"],"sourceRoot":""}