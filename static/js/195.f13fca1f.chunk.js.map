{"version":3,"file":"static/js/195.f13fca1f.chunk.js","mappings":"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","sources":["components/FormFrame.jsx","services/Grains&Bakery/cookedFoods.js","components/Grains&Bakery/CookedFoodsGB.jsx","components/variables.js"],"sourcesContent":["import '../assets/css/FormFrame.css'; // import the CSS file\r\n\r\nconst FormFrame = (props) => {\r\n        return (\r\n                <>\r\n                        <div className=\"form-frame-container\">\r\n                                <div className=\"form-frame\">\r\n                                        {props.children}\r\n                                </div>\r\n                        </div>\r\n                </>\r\n        );\r\n}\r\n\r\nexport default FormFrame;\r\n","const cookedFoods = [\r\n        {\r\n                details: {\r\n                        productName: 'אורז/אטריות/פסטה/בורגול קוסקוס/גריסי פנינה/כוסמת פתיתים/קינואה',\r\n                        value: 0.5,\r\n                        gram: 50,\r\n                        fat: 0,\r\n                },\r\n                fat: {\r\n                        fatString: '',\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כוס)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: true,\r\n                        fat: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'תירס משומר מתוק (גרעינים)',\r\n                        value: 0.5,\r\n                        gram: 70,\r\n                        fat: 0,\r\n                },\r\n                fat: {\r\n                        fatString: '',\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כוס)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: true,\r\n                        fat: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'תירס משומר לייט',\r\n                        value: 1,\r\n                        gram: 140,\r\n                        fat: 0,\r\n                },\r\n                fat: {\r\n                        fatString: '',\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כוס)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: true,\r\n                        fat: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'תירס קלח',\r\n                        value: 0.5,\r\n                        gram: 120,\r\n                        fat: 0,\r\n                },\r\n                fat: {\r\n                        fatString: '',\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(יחידה גדולה)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: true,\r\n                        fat: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'תפוח אדמה',\r\n                        value: 1,\r\n                        gram: 90,\r\n                        fat: 0,\r\n                },\r\n                fat: {\r\n                        fatString: '',\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(קטן)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: true,\r\n                        fat: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'תפוח אדמה – מחית',\r\n                        value: 0.5,\r\n                        gram: 0,\r\n                        fat: 0,\r\n                },\r\n                fat: {\r\n                        fatString: '',\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כוס)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: false,\r\n                        fat: false,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: `תפ\"א מטוגנים (צ'יפס)`,\r\n                        value: 0.5,\r\n                        gram: 20,\r\n                        fat: 1,\r\n                },\r\n                fat: {\r\n                        fatString: ' יש להוסיף מנות שומן *',\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כוס)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: true,\r\n                        fat: true,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'בטטה',\r\n                        value: 0.5,\r\n                        gram: 70,\r\n                        fat: 0,\r\n                },\r\n                fat: {\r\n                        fatString: '',\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(בינונית)',\r\n                },\r\n                check: {\r\n                        count: true,\r\n                        gram: true,\r\n                        fat: false,\r\n                },\r\n        },\r\n];\r\nexport default cookedFoods;  ","// import react state\r\nimport { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\n// import service \r\nimport cookedFoods from '../../services/Grains&Bakery/cookedFoods';\r\n// import variables \r\nimport { variables, getMaxHeight } from '../variables';\r\n// import container \r\nimport FormFrame from '../FormFrame';\r\n// import css\r\nimport '../../assets/css/basic.css';\r\n\r\nconst CookedFoodsGB = () => {\r\n        //  array of type calculation\r\n        const types = ['כמות', 'גרם'];\r\n\r\n        // My states  \r\n        const [products] = useState(cookedFoods);\r\n        const [productName, setProductName] = useState(cookedFoods[0]['details']['productName']);\r\n        const [productType, setProductType] = useState(types[0]);\r\n        const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n        const [productAmount, setProductAmount] = useState(1);\r\n        const [result, setResult] = useState('');\r\n        const [flag, setFlag] = useState(false);\r\n        // Get the product object \r\n        const product = products.find(product => product?.details?.productName === productName);\r\n        // Get array of type\r\n        const type = types.find(type => type === productType);\r\n\r\n        useEffect(() => {\r\n                // Add event listener on mount\r\n                window.addEventListener('resize', handleResize);\r\n\r\n                // Clean up the event listener on unmount\r\n                return () => {\r\n                        window.removeEventListener('resize', handleResize);\r\n                };\r\n        }, []);\r\n\r\n        // My handlers\r\n        const calculateValue = (productName, amount, productType) => {\r\n                // Calculate count \r\n                const count = (amount / product?.details?.value).toLocaleString(variables?.numberFormat);\r\n                // Calculate gram \r\n                const gram = (amount / product?.details?.gram).toLocaleString(variables?.numberFormat);\r\n                // Calculate fatString0 \r\n                const fatString0 = `${product?.fat?.fatString.split(\" יש להוסיף \")[0]} יש להוסיף`;\r\n                // Calculate fatString1 \r\n                const fatString1 = product?.fat?.fatString.split(\" יש להוסיף \")[1];\r\n\r\n                // Match count with NEGLIGIBLE_NUMBER\r\n                const calculationCountFraction = ` ${count}`;\r\n                // Calculate count reasult using toFraction \r\n                const calculationCount = ` ${variables?.fractionCalculation(count)}`;\r\n                // Calculate count fat reasult using toFraction \r\n                const calculationCountFat = ` ${variables?.fractionCalculation(count)}\\n ${fatString0} ${variables?.fractionCalculation(count)} ${fatString1}`;\r\n\r\n                // Match gram with NEGLIGIBLE_NUMBER\r\n                const calculationGramFraction = ` ${gram}`;\r\n                // Calculate gram reasult using toFraction \r\n                const calculationGram = ` ${variables?.fractionCalculation(gram)}`;\r\n                // Calculate gram fat reasult using toFraction \r\n                const calculationGramFat = ` ${variables?.fractionCalculation(gram)}\\n ${fatString0} ${variables?.fractionCalculation(gram)} ${fatString1}`;\r\n\r\n                if (isNaN(productAmount)) {\r\n                        return alert(variables.stringProductAmount);\r\n                }\r\n                if (product && type) {\r\n                        if (product?.check?.gram && product?.check?.fat) {\r\n                                return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCountFat\r\n                                        : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGramFat\r\n                                                : ' זניח';\r\n                        }\r\n                        else if (product?.check?.gram) {\r\n                                return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount\r\n                                        : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGram\r\n                                                : 'זניח';\r\n                        }\r\n                        else {\r\n                                return productType === types[1] ? ` לא ניתן לבצע חישוב לפי גרמים לערך ${productName} `\r\n                                        : calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount\r\n                                                : 'זניח';\r\n                        }\r\n                }\r\n                else {\r\n                        return alert(variables.stringAlert);\r\n                }\r\n        };\r\n\r\n        const handleProduct = (event) => {\r\n                setProductName(event.target.value);\r\n        };\r\n\r\n        const handleProductPC = (selectedOption) => {\r\n                setProductName(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleAmount = (event) => {\r\n                setProductAmount(event.target.value);\r\n        };\r\n\r\n        const handleProductType = (event) => {\r\n                setProductType(event.target.value);\r\n        };\r\n\r\n        const handleProductTypePC = (selectedOption) => {\r\n                setProductType(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleResize = () => {\r\n                setViewportWidth(window.innerWidth);\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n                // Prevent reload the page\r\n                e.preventDefault();\r\n                try {\r\n                        setResult(calculateValue(productName, productAmount, productType));\r\n                        setFlag(true);\r\n                }\r\n                catch (err) {\r\n                        console.log(err.message);\r\n                        setResult(variables.stringResult);\r\n                }\r\n        };\r\n        const productsOptions = products.map((product) => {\r\n                const shouldShowOption = (product?.check?.gram && productType === types[1])\r\n                        || productType === types[0];\r\n\r\n                return shouldShowOption ? (\r\n                        {\r\n                                value: product?.details?.productName,\r\n                                label: productType === types[0]\r\n                                        ? `${product?.details?.productName} ${product?.unit?.measureString}`\r\n                                        : `${product?.details?.productName} ${product?.unit?.gramString}`\r\n                        }\r\n                ) : null;\r\n        });\r\n\r\n        const filteredProductsOptions = productsOptions.filter(option => option !== null);\r\n\r\n        const typesOptions = types.map((type) => ({\r\n                value: type,\r\n                label: type\r\n        }));\r\n\r\n        return (\r\n                <>\r\n                        <FormFrame>\r\n                                <form onSubmit={handleSubmit}>\r\n                                        <h1>מזונות מבושלים (ללא שמן)</h1>\r\n                                        <label>\r\n                                                חישוב לפי כמות או גרמים:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                id='productType'\r\n                                                                name='productType'\r\n                                                                value={productType}\r\n                                                                onChange={handleProductType}\r\n                                                        >\r\n                                                                {\r\n                                                                        types.map((type) => (\r\n                                                                                <option key={type} name=\"productType\" value={type}>\r\n                                                                                        {type}\r\n                                                                                </option>\r\n                                                                        ))\r\n                                                                }\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                id='productType'\r\n                                                                name='productType'\r\n                                                                options={typesOptions}\r\n                                                                isSearchable\r\n                                                                isClearable\r\n                                                                noOptionsMessage={() => variables.stringSelectProductTypeNoOptionsMessage}\r\n                                                                placeholder={variables.stringSelect}\r\n                                                                value={typesOptions.find((option) => option.value === productType)}\r\n                                                                onChange={handleProductTypePC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <label htmlFor=\"productAmount\">\r\n                                                כמות נאכלת:\r\n                                                <input\r\n                                                        name='productAmount'\r\n                                                        type=\"number\"\r\n                                                        id=\"productAmount\"\r\n                                                        min=\"0\"\r\n                                                        max=\"1000\"\r\n                                                        step=\"any\"\r\n                                                        value={productAmount}\r\n                                                        onChange={handleAmount}\r\n                                                />\r\n                                        </label>\r\n                                        <label>\r\n                                                סוג המזון המבושל:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                value={productName}\r\n                                                                onChange={handleProduct}\r\n                                                        >\r\n                                                                {products.map((product) => {\r\n                                                                        const shouldShowOption = (product?.check?.gram && productType === types[1])\r\n                                                                                || productType === types[0];\r\n                                                                        return shouldShowOption ? (\r\n                                                                                <option\r\n                                                                                        key={product?.details?.productName}\r\n                                                                                        value={product?.details?.productName}\r\n                                                                                >\r\n                                                                                        {\r\n                                                                                                productType === types[0]\r\n                                                                                                        ? `${product?.details?.productName} ${product?.unit?.measureString}`\r\n                                                                                                        : `${product?.details?.productName} ${product?.unit?.gramString}`\r\n                                                                                        }\r\n                                                                                </option>\r\n                                                                        ) : null;\r\n                                                                })}\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                styles={{\r\n                                                                        menu: (provided) => ({\r\n                                                                                ...provided,\r\n                                                                                maxHeight: getMaxHeight(viewportWidth),\r\n                                                                                overflowY: 'auto',\r\n                                                                        }),\r\n                                                                }}\r\n                                                                options={filteredProductsOptions}\r\n                                                                isSearchable\r\n                                                                isClearable\r\n                                                                noOptionsMessage={() => variables.stringSelectProductNameNoOptionsMessage}\r\n                                                                placeholder={variables.stringSelect}\r\n                                                                value={filteredProductsOptions.find((option) => option.value === productName)}\r\n                                                                onChange={handleProductPC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <div className={productName === 'אורז/אטריות/פסטה/בורגול קוסקוס/גריסי פנינה/כוסמת פתיתים/קינואה' && viewportWidth > 600 ? 'div-result-CookedFoodsGB' : 'div-result div-result-pc'}>\r\n                                                {/* <div className='div-result div-result-pc'> */}\r\n                                                {flag === true && 'מספר מנות:'}\r\n                                                <div className='result'>{result}</div>\r\n                                        </div>\r\n                                        <button type=\"submit\">חשב</button>\r\n                                </form >\r\n                        </FormFrame >\r\n                </>\r\n        );\r\n};\r\n\r\nexport default CookedFoodsGB;","// Library that parse decimals into fractions\r\nimport { toFraction } from 'fraction-parser';\r\n\r\nexport const variables = {\r\n  // Use for toLocaleString\r\n  numberFormat: { minimumFractionDigits: 2, maximumFractionDigits: 2 },\r\n  // Use for toFraction\r\n  fractionFormat: { useUnicodeVulgar: true },\r\n  fractionCalculation: (variable) =>\r\n    toFraction(Number(variable) || 0, variables.fractionFormat),\r\n  NEGLIGIBLE_NUMBER: 0.25, // זניח\r\n  stringResult: 'קיימת בעיה, במקרה והיא חוזרת אנא פנה לבונה האתר',\r\n  stringAlert: 'נא לבחור פריט מן הרשימה',\r\n  stringProductAmount: 'יש להזין מספר',\r\n  stringSelect: 'יש ללחוץ על מנת לבחור...',\r\n  stringSelectProductTypeNoOptionsMessage: 'ניתן לחשב רק באמצעות כמות או גרם',\r\n  stringSelectProductNameNoOptionsMessage: 'הפריט לא נמצא ברשימה',\r\n};\r\n\r\n// Use for select-react dropdown list\r\nexport const getMaxHeight = (viewportWidth) => {\r\n  const maxHeightOptions = {\r\n    2560: 'none',\r\n    2400: '295px',\r\n    1745.45: '180px',\r\n    1536: '150px',\r\n  };\r\n\r\n  const viewportKeys = Object.keys(maxHeightOptions)\r\n    .map(parseFloat)\r\n    .sort((a, b) => b - a);\r\n\r\n  const selectedMaxHeight = viewportKeys.find(\r\n    (width) => viewportWidth >= width\r\n  );\r\n\r\n  return selectedMaxHeight ? maxHeightOptions[selectedMaxHeight] : 'none';\r\n};\r\n"],"names":["props","className","children","details","productName","value","gram","fat","fatString","unit","gramString","measureString","check","count","types","useState","cookedFoods","products","setProductName","productType","setProductType","window","innerWidth","viewportWidth","setViewportWidth","productAmount","setProductAmount","result","setResult","flag","setFlag","product","find","type","useEffect","addEventListener","handleResize","removeEventListener","productsOptions","map","label","filteredProductsOptions","filter","option","typesOptions","FormFrame","onSubmit","e","preventDefault","amount","toLocaleString","variables","numberFormat","fatString0","split","fatString1","calculationCountFraction","calculationCount","fractionCalculation","calculationCountFat","calculationGramFraction","calculationGram","calculationGramFat","isNaN","alert","stringProductAmount","NEGLIGIBLE_NUMBER","stringAlert","calculateValue","err","console","log","message","stringResult","id","name","onChange","event","target","options","isSearchable","isClearable","noOptionsMessage","stringSelectProductTypeNoOptionsMessage","placeholder","stringSelect","selectedOption","htmlFor","min","max","step","styles","menu","provided","maxHeight","getMaxHeight","overflowY","stringSelectProductNameNoOptionsMessage","minimumFractionDigits","maximumFractionDigits","fractionFormat","useUnicodeVulgar","variable","toFraction","Number","maxHeightOptions","selectedMaxHeight","Object","keys","parseFloat","sort","a","b","width"],"sourceRoot":""}