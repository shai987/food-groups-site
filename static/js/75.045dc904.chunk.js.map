{"version":3,"file":"static/js/75.045dc904.chunk.js","mappings":"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","sources":["components/FormFrame.jsx","services/Vegetables/vegetables.js","components/Vegetables/Vegetable.jsx","components/variables.js"],"sourcesContent":["import '../assets/css/FormFrame.css'; // import the CSS file\r\n\r\nconst FormFrame = (props) => {\r\n        return (\r\n                <>\r\n                        <div className=\"form-frame-container\">\r\n                                <div className=\"form-frame\">\r\n                                        {props.children}\r\n                                </div>\r\n                        </div>\r\n                </>\r\n        );\r\n}\r\n\r\nexport default FormFrame;\r\n","const vegetables = [\r\n  {\r\n    details: {\r\n      productName: 'כוס ירק טרי',\r\n      value: 1,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: '2 כוסות ירקות עליים',\r\n      value: 2,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'חצי כוס ירק מבושל',\r\n      value: 0.5,\r\n    },\r\n  },\r\n  {\r\n    details: {\r\n      productName: 'חצי כוס מיץ ירק (כ-100 גרם)',\r\n      value: 0.5,\r\n    },\r\n  },\r\n];\r\nexport default vegetables;\r\n","// import react state\r\nimport { useState, useEffect } from 'react';\r\n// import from react-select\r\nimport Select from 'react-select';\r\n// import service \r\nimport vegetables from '../../services/Vegetables/vegetables';\r\n// import variables \r\nimport { variables } from '../variables';\r\n// import container \r\nimport FormFrame from '../FormFrame';\r\n// import css\r\nimport '../../assets/css/basic.css';\r\n\r\nconst Vegetable = () => {\r\n        // My states \r\n        const [products] = useState(vegetables);\r\n        const [productName, setProductName] = useState(vegetables[0]['details']['productName']);\r\n        const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n        const [productAmount, setProductAmount] = useState(1);\r\n        const [result, setResult] = useState('');\r\n        const [flag, setFlag] = useState(false);\r\n\r\n        // Get product object \r\n        const product = products.find(product => product?.details?.productName === productName);\r\n\r\n        useEffect(() => {\r\n                // Add event listener on mount\r\n                window.addEventListener('resize', handleResize);\r\n\r\n                // Clean up the event listener on unmount\r\n                return () => {\r\n                        window.removeEventListener('resize', handleResize);\r\n                };\r\n        }, []);\r\n\r\n        // My handlers\r\n        const calculateValue = (amount) => {\r\n                // Calculate count \r\n                const count = (amount / product?.details?.value).toLocaleString(variables?.numberFormat);\r\n\r\n                // Match count with NEGLIGIBLE_NUMBER\r\n                const calculationCountFraction = ` ${count}`;\r\n                // Calculate count reasult using toFraction \r\n                const calculationCount = ` ${variables?.fractionCalculation(count)}`;\r\n\r\n                if (isNaN(productAmount)) {\r\n                        return alert(variables.stringProductAmount);\r\n                }\r\n                if (product) {\r\n                        return calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount : ' זניח';\r\n                }\r\n                else {\r\n                        return alert(variables.stringAlert);\r\n                }\r\n        };\r\n\r\n\r\n        const handleProduct = (event) => {\r\n                setProductName(event.target.value);\r\n        };\r\n\r\n        const handleProductPC = (selectedOption) => {\r\n                setProductName(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleAmount = (event) => {\r\n                setProductAmount(event.target.value);\r\n        };\r\n\r\n        const handleResize = () => {\r\n                setViewportWidth(window.innerWidth);\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n                // Prevent reload the page\r\n                e.preventDefault();\r\n                try {\r\n                        setResult(calculateValue(productAmount));\r\n                        setFlag(true);\r\n                }\r\n                catch (err) {\r\n                        console.log(err.message);\r\n                        setResult(variables.stringResult);\r\n                }\r\n        };\r\n\r\n        const productsOptions = products.map((product) => ({\r\n                value: product?.details?.productName,\r\n                label: product?.details?.productName\r\n        }));\r\n\r\n        return (\r\n                <>\r\n                        <FormFrame>\r\n                                <form onSubmit={handleSubmit}>\r\n                                        <h1>ירקות</h1>\r\n                                        <label>\r\n                                                חישוב לפי כמות:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                value={productName}\r\n                                                                onChange={handleProduct}\r\n                                                        >\r\n                                                                {products.map((product) => (\r\n                                                                        <option key={product?.details?.productName} value={product?.details?.productName}>\r\n                                                                                {product?.details?.productName}\r\n                                                                        </option>\r\n                                                                ))}\r\n                                                        </select>\r\n\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                options={productsOptions}\r\n                                                                isSearchable\r\n                                                                isClearable\r\n                                                                noOptionsMessage={() => variables.stringSelectProductNameNoOptionsMessage}\r\n                                                                placeholder={variables.stringSelect}\r\n                                                                value={productsOptions.find((option) => option.value === productName)}\r\n                                                                onChange={handleProductPC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <label htmlFor=\"productAmount\">\r\n                                                כמות נאכלת:\r\n                                                <input\r\n                                                        name='productAmount'\r\n                                                        type=\"number\"\r\n                                                        id=\"productAmount\"\r\n                                                        min=\"0\"\r\n                                                        max=\"1000\"\r\n                                                        step=\"any\"\r\n                                                        value={productAmount}\r\n                                                        onChange={handleAmount}\r\n                                                />\r\n                                        </label>\r\n                                        <div className='div-result'>\r\n                                                {flag === true && 'מספר מנות:'}\r\n                                                <div className='result'>{result}</div>\r\n                                        </div>\r\n                                        <button type=\"submit\">חשב</button>\r\n                                </form >\r\n                        </FormFrame >\r\n                </>\r\n        );\r\n};\r\n\r\nexport default Vegetable;","// Library that parse decimals into fractions\r\nimport { toFraction } from 'fraction-parser';\r\n\r\nexport const variables = {\r\n  // Use for toLocaleString\r\n  numberFormat: { minimumFractionDigits: 2, maximumFractionDigits: 2 },\r\n  // Use for toFraction\r\n  fractionFormat: { useUnicodeVulgar: true },\r\n  fractionCalculation: (variable) =>\r\n    toFraction(Number(variable) || 0, variables.fractionFormat),\r\n  NEGLIGIBLE_NUMBER: 0.25, // זניח\r\n  stringResult: 'קיימת בעיה, במקרה והיא חוזרת אנא פנה לבונה האתר',\r\n  stringAlert: 'נא לבחור פריט מן הרשימה',\r\n  stringProductAmount: 'יש להזין מספר',\r\n  stringSelect: 'יש ללחוץ על מנת לבחור...',\r\n  stringSelectProductTypeNoOptionsMessage: 'ניתן לחשב רק באמצעות כמות או גרם',\r\n  stringSelectProductNameNoOptionsMessage: 'הפריט לא נמצא ברשימה',\r\n};\r\n\r\n// Use for select-react dropdown list\r\nexport const getMaxHeight = (viewportWidth) => {\r\n  const maxHeightOptions = {\r\n    2560: 'none',\r\n    2400: '295px',\r\n    1745.45: '180px',\r\n    1536: '150px',\r\n  };\r\n\r\n  const viewportKeys = Object.keys(maxHeightOptions)\r\n    .map(parseFloat)\r\n    .sort((a, b) => b - a);\r\n\r\n  const selectedMaxHeight = viewportKeys.find(\r\n    (width) => viewportWidth >= width\r\n  );\r\n\r\n  return selectedMaxHeight ? maxHeightOptions[selectedMaxHeight] : 'none';\r\n};\r\n"],"names":["props","className","children","details","productName","value","useState","vegetables","products","setProductName","window","innerWidth","viewportWidth","setViewportWidth","productAmount","setProductAmount","result","setResult","flag","setFlag","product","find","useEffect","addEventListener","handleResize","removeEventListener","productsOptions","map","label","FormFrame","onSubmit","e","preventDefault","amount","count","toLocaleString","variables","numberFormat","calculationCountFraction","calculationCount","fractionCalculation","isNaN","alert","stringProductAmount","NEGLIGIBLE_NUMBER","stringAlert","calculateValue","err","console","log","message","stringResult","onChange","event","target","options","isSearchable","isClearable","noOptionsMessage","stringSelectProductNameNoOptionsMessage","placeholder","stringSelect","option","selectedOption","htmlFor","name","type","id","min","max","step","minimumFractionDigits","maximumFractionDigits","fractionFormat","useUnicodeVulgar","variable","toFraction","Number","stringSelectProductTypeNoOptionsMessage","getMaxHeight","maxHeightOptions","selectedMaxHeight","Object","keys","parseFloat","sort","a","b","width"],"sourceRoot":""}