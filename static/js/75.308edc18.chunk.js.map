{"version":3,"file":"static/js/75.308edc18.chunk.js","mappings":"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","sources":["components/FormFrame.jsx","services/Vegetables/vegetables.js","components/Vegetables/Vegetable.jsx","components/variables.js"],"sourcesContent":["import '../assets/css/FormFrame.css'; // import the CSS file\r\n\r\nconst FormFrame = (props) => {\r\n        return (\r\n                <>\r\n                        <div className=\"form-frame-container\">\r\n                                <div className=\"form-frame\">\r\n                                        {props.children}\r\n                                </div>\r\n                        </div>\r\n                </>\r\n        );\r\n}\r\n\r\nexport default FormFrame;\r\n","const vegetables = [\r\n        {\r\n                details: {\r\n                        typeName: 'כוס ירק טרי',\r\n                        value: 1,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        typeName: '2 כוסות ירקות עליים',\r\n                        value: 2,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        typeName: 'חצי כוס ירק מבושל',\r\n                        value: 0.5,\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        typeName: 'חצי כוס מיץ ירק (כ-100 גרם)',\r\n                        value: 0.5,\r\n                },\r\n        },\r\n\r\n];\r\nexport default vegetables;  ","// import react state\r\nimport { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\n// import service \r\nimport vegetables from '../../services/Vegetables/vegetables';\r\n// import variables \r\nimport { variables } from '../variables';\r\n// import container \r\nimport FormFrame from '../FormFrame';\r\n// import css\r\nimport '../../assets/css/basic.css';\r\n\r\nconst Vegetable = () => {\r\n        // My states \r\n        const [typesName] = useState(vegetables);\r\n        const [typeName, setTypeName] = useState(vegetables[0]['details']['typeName']);\r\n        const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n        const [productAmount, setProductAmount] = useState(1);\r\n        const [result, setResult] = useState('');\r\n        const [flag, setFlag] = useState(false);\r\n        // Get typeName object \r\n        const type = typesName.find(type => type?.details?.typeName === typeName);\r\n\r\n        useEffect(() => {\r\n                // Add event listener on mount\r\n                window.addEventListener('resize', handleResize);\r\n\r\n                // Clean up the event listener on unmount\r\n                return () => {\r\n                        window.removeEventListener('resize', handleResize);\r\n                };\r\n        }, []);\r\n\r\n        // My handlers\r\n        const calculateValue = (amount) => {\r\n                // Calculate count \r\n                const count = (amount / type?.details?.value).toLocaleString(variables?.numberFormat);\r\n\r\n                // Match count with NEGLIGIBLE_NUMBER\r\n                const calculationCountFraction = ` ${count}`;\r\n                // Calculate count reasult using toFraction \r\n                const calculationCount = ` ${variables?.fractionCalculation(count)}`;\r\n\r\n                if (type) {\r\n                        return calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount : ' זניח';\r\n                }\r\n                else {\r\n                        return alert(variables.stringAlert);\r\n                }\r\n        };\r\n\r\n        const handleAmount = (event) => {\r\n                setProductAmount(event.target.value);\r\n        };\r\n\r\n        const handleProductType = (event) => {\r\n                setTypeName(event.target.value);\r\n        };\r\n\r\n        const handleProductTypePC = (selectedOption) => {\r\n                setTypeName(selectedOption.value);\r\n        };\r\n\r\n        const handleResize = () => {\r\n                setViewportWidth(window.innerWidth);\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n                // Prevent reload the page\r\n                e.preventDefault();\r\n                try {\r\n                        setResult(calculateValue(productAmount));\r\n                        setFlag(true);\r\n                }\r\n                catch (err) {\r\n                        console.log(err.message);\r\n                        setResult(variables.stringResult);\r\n                }\r\n        };\r\n\r\n        const typesOptions = typesName.map((type) => ({\r\n                value: type?.details?.typeName,\r\n                label: type?.details?.typeName\r\n        }));\r\n\r\n        return (\r\n                <>\r\n                        <FormFrame>\r\n                                <form onSubmit={handleSubmit}>\r\n                                        <h1>ירקות</h1>\r\n                                        <label>\r\n                                                חישוב לפי כמות:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                value={typeName}\r\n                                                                onChange={handleProductType}\r\n                                                        >\r\n                                                                {typesName.map((type) => (\r\n                                                                        <option key={type?.details?.typeName} name=\"typeName\" value={type?.details?.typeName}>\r\n                                                                                {type?.details?.typeName}\r\n                                                                        </option>\r\n                                                                ))}\r\n                                                        </select>\r\n\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                options={typesOptions}\r\n                                                                isSearchable\r\n                                                                placeholder={typeName}\r\n                                                                value={typesOptions.find((option) => option.value === typesName)}\r\n                                                                onChange={handleProductTypePC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <label htmlFor=\"productAmount\">\r\n                                                כמות נאכלת:\r\n                                                <input\r\n                                                        name='productAmount'\r\n                                                        type=\"number\"\r\n                                                        id=\"productAmount\"\r\n                                                        min=\"0\"\r\n                                                        max=\"1000\"\r\n                                                        step=\"any\"\r\n                                                        value={productAmount}\r\n                                                        onChange={handleAmount}\r\n                                                />\r\n                                        </label>\r\n                                        <div className='div-result div-result-pc'>\r\n                                                {flag === true && 'מספר מנות:'}\r\n                                                <div className='result'>{result}</div>\r\n                                        </div>\r\n                                        <button type=\"submit\">חשב</button>\r\n                                </form >\r\n                        </FormFrame >\r\n                </>\r\n        );\r\n};\r\n\r\nexport default Vegetable;","// Library that parse decimals into fractions\r\nimport { toFraction } from 'fraction-parser';\r\n\r\nexport const variables = {\r\n  // Use for toLocaleString\r\n  numberFormat: { minimumFractionDigits: 2, maximumFractionDigits: 2 },\r\n  // Use for toFraction\r\n  fractionFormat: { useUnicodeVulgar: true },\r\n  fractionCalculation: (variable) =>\r\n    toFraction(Number(variable) || 0, variables.fractionFormat),\r\n  NEGLIGIBLE_NUMBER: 0.25,\r\n  stringResult: 'קיימת בעיה, במקרה והיא חוזרת אנא פנה לבונה האתר',\r\n  stringAlert: 'הערך שהוזן אינו קיים',\r\n};\r\n"],"names":["props","className","children","details","typeName","value","useState","vegetables","typesName","setTypeName","window","innerWidth","viewportWidth","setViewportWidth","productAmount","setProductAmount","result","setResult","flag","setFlag","type","find","useEffect","addEventListener","handleResize","removeEventListener","typesOptions","map","label","FormFrame","onSubmit","e","preventDefault","amount","count","toLocaleString","variables","numberFormat","calculationCountFraction","calculationCount","fractionCalculation","NEGLIGIBLE_NUMBER","alert","stringAlert","calculateValue","err","console","log","message","stringResult","onChange","event","target","name","options","isSearchable","placeholder","option","selectedOption","htmlFor","id","min","max","step","minimumFractionDigits","maximumFractionDigits","fractionFormat","useUnicodeVulgar","variable","toFraction","Number"],"sourceRoot":""}