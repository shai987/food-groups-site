{"version":3,"file":"static/js/247.181bd260.chunk.js","mappings":"sKAcA,EAZkB,SAACA,GACX,OACQ,+BACQ,gBAAKC,UAAU,uBAAsB,UAC7B,gBAAKA,UAAU,aAAY,SAClBD,EAAME,cAK/C,C,qGC6CA,EAzDe,CACP,CACQC,QAAS,CACDC,YAAa,4KACbC,MAAO,EACPC,KAAM,IAEdC,KAAM,CACEC,WAAY,uBACZC,cAAe,mBAG/B,CACQN,QAAS,CACDC,YAAa,iJACbC,MAAO,EACPC,KAAM,IAEdC,KAAM,CACEC,WAAY,uBACZC,cAAe,mBAG/B,CACQN,QAAS,CACDC,YAAa,0FACbC,MAAO,EACPC,KAAM,IAEdC,KAAM,CACEC,WAAY,uBACZC,cAAe,mBAG/B,CACQN,QAAS,CACDC,YAAa,2BACbC,MAAO,EACPC,KAAM,IAEdC,KAAM,CACEC,WAAY,uBACZC,cAAe,mBAG/B,CACQN,QAAS,CACDC,YAAa,gEACbC,MAAO,EACPC,KAAM,IAEdC,KAAM,CACEC,WAAY,uBACZC,cAAe,oB,uCC8IvC,EAtLc,WAEN,IAAMC,EAAQ,CAAC,2BAAQ,sBAGvB,GAAmBC,EAAAA,EAAAA,UAASC,GAArBC,GAA4B,YAApB,GACf,GAAsCF,EAAAA,EAAAA,UAASC,EAAO,GAAY,QAAe,aAAE,eAA5ER,EAAW,KAAEU,EAAc,KAClC,GAAsCH,EAAAA,EAAAA,UAASD,EAAM,IAAG,eAAjDK,EAAW,KAAEC,EAAc,KAClC,GAA0CL,EAAAA,EAAAA,UAASM,OAAOC,YAAW,eAA9DC,EAAa,KAAEC,EAAgB,KACtC,GAA0CT,EAAAA,EAAAA,UAAS,GAAE,eAA9CU,EAAa,KAAEC,EAAgB,KACtC,GAA4BX,EAAAA,EAAAA,UAAS,IAAG,eAAjCY,EAAM,KAAEC,EAAS,KACxB,GAAwBb,EAAAA,EAAAA,WAAS,GAAM,eAAhCc,EAAI,KAAEC,EAAO,KAEdC,EAAUd,EAASe,MAAK,SAAAD,GAAO,aAAW,OAAPA,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBC,eAAgBA,CAAW,IAEhFyB,EAAOnB,EAAMkB,MAAK,SAAAC,GAAI,OAAIA,IAASd,CAAW,KAEpDe,EAAAA,EAAAA,YAAU,WAKF,OAHAb,OAAOc,iBAAiB,SAAUC,GAG3B,WACCf,OAAOgB,oBAAoB,SAAUD,EAC7C,CACR,GAAG,IAGH,IA6CMA,EAAe,WACbZ,EAAiBH,OAAOC,WAChC,EAeMgB,EAAkBrB,EAASsB,KAAI,SAACR,GAAO,oBAAM,CAC3CtB,MAAc,OAAPsB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBC,YACzBgC,MACQrB,IAAgBL,EAAM,GAAE,UACJ,OAAPiB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBC,YAAW,YAAW,OAAPuB,QAAO,IAAPA,GAAa,QAAN,EAAPA,EAASpB,YAAI,WAAN,EAAP,EAAeE,eAAa,UACtD,OAAPkB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBC,YAAW,YAAW,OAAPuB,QAAO,IAAPA,GAAa,QAAN,EAAPA,EAASpB,YAAI,WAAN,EAAP,EAAeC,YAC5E,IAEK6B,EAAe3B,EAAMyB,KAAI,SAACN,GAAI,MAAM,CAClCxB,MAAOwB,EACPO,MAAOP,EACd,IAED,OACQ,+BACQ,SAACS,EAAA,EAAS,WACF,kBAAMC,SA7BT,SAACC,GAEdA,EAAEC,iBACF,IACQjB,EArDO,SAACkB,EAAQ3B,GAAiB,IAAD,IAElC4B,GAASD,GAAgB,OAAPf,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBE,QAAOuC,eAAwB,OAATC,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWC,cAErExC,GAAQoC,GAAgB,OAAPf,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBG,OAAMsC,eAAwB,OAATC,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWC,cAGnEC,EAAwB,WAAOJ,GAE/BK,EAAgB,WAAgB,OAATH,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWI,oBAAoBN,IAGtDO,EAAuB,WAAO5C,GAE9B6C,EAAe,WAAgB,OAATN,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWI,oBAAoB3C,IAE3D,OAAIqB,GAAWE,EACAd,IAAgBL,EAAM,IAAMqC,IAAqC,OAATF,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWO,mBAAoBJ,EACpFjC,IAAgBL,EAAM,IAAMwC,IAAoC,OAATL,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWO,mBAAoBD,EAC9E,2BAGXE,MAAMR,EAAAA,EAAUS,YAEvC,CA6B0BC,CAAelC,EAAeN,IACxCW,GAAQ,EAChB,CACA,MAAO8B,GACCC,QAAQC,IAAIF,EAAIG,SAChBnC,EAAUqB,EAAAA,EAAUe,aAC5B,CACR,EAkBqD,WACrB,wBAAI,sEACJ,mBAAOC,GAAG,cAAa,UAAC,0HAEf1C,GAAiB,KACV,mBACQ0C,GAAG,cACHC,KAAK,cACLzD,MAAOU,EACPgD,SAjD9B,SAACC,GACnBhD,EAAegD,EAAMC,OAAO5D,MACpC,EA+CoF,SAGpBK,EAAMyB,KAAI,SAACN,GAAI,OACP,mBAAmBiC,KAAK,cAAczD,MAAOwB,EAAK,SACzCA,GADIA,EAEJ,OAKjC,SAAC,KAAM,CACCiC,KAAK,cACLD,GAAG,cACHK,QAAS7B,EACT8B,cAAY,EACZ9D,MAAOgC,EAAaT,MAAK,SAACwC,GAAM,OAAKA,EAAO/D,QAAUU,CAAW,IACjEgD,SA9D5B,SAACM,GACrBrD,EAAeqD,EAAehE,MACtC,QAgEgC,mBAAOiE,QAAQ,gBAAe,UAAC,4DAEvB,kBACQR,KAAK,gBACLjC,KAAK,SACLgC,GAAG,gBACHU,IAAI,IACJC,IAAI,OACJC,KAAK,MACLpE,MAAOgB,EACP0C,SApF3B,SAACC,GACd1C,EAAiB0C,EAAMC,OAAO5D,MACtC,QAqFgC,6BAAO,+CAEEc,GAAiB,KACV,mBACQd,MAAOD,EACP2D,SApGlC,SAACC,GACflD,EAAekD,EAAMC,OAAO5D,MACpC,EAkGgF,SAEvBQ,EAASsB,KAAI,SAACR,GAAO,uBACd,mBAA4CtB,MAAc,OAAPsB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBC,YAAY,SACxEW,IAAgBL,EAAM,GAAE,UAAa,OAAPiB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBC,YAAW,YAAW,OAAPuB,QAAO,IAAPA,GAAa,QAAN,EAAPA,EAASpB,YAAI,WAAN,EAAP,EAAeE,eAAa,UAAe,OAAPkB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBC,YAAW,YAAW,OAAPuB,QAAO,IAAPA,GAAa,QAAN,EAAPA,EAASpB,YAAI,WAAN,EAAP,EAAeC,aADxI,OAAPmB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASxB,eAAO,WAAT,EAAP,EAAkBC,YAEtB,OAIzB,SAAC,KAAM,CACC8D,QAAShC,EACTiC,cAAY,EACZ9D,MAAO6B,EAAgBN,MAAK,SAACwC,GAAM,OAAKA,EAAO/D,QAAUD,CAAW,IACpE2D,SA7GhC,SAACM,GACjBvD,EAAeuD,EAAehE,MACtC,QA+GgC,iBAAKJ,UAAU,2BAA0B,WACvB,IAATwB,GAAiB,sDAClB,gBAAKxB,UAAU,SAAQ,SAAEsB,QAEjC,mBAAQM,KAAK,SAAQ,SAAC,6BAK9D,C,qEC9LagB,EAAY,CAEvBC,aAAc,CAAE4B,sBAAuB,EAAGC,sBAAuB,GAEjEC,eAAgB,CAAEC,kBAAkB,GACpC5B,oBAAqB,SAAC6B,GAAQ,OAC5BC,EAAAA,EAAAA,YAAWC,OAAOF,IAAa,EAAGjC,EAAU+B,eAAe,EAC7DxB,kBAAmB,IACnBQ,aAAc,gPACdN,YAAa,4G","sources":["components/FormFrame.jsx","services/Grains&Bakery/flours.js","components/Grains&Bakery/Flour.jsx","components/variables.js"],"sourcesContent":["import '../assets/css/FormFrame.css'; // import the CSS file\r\n\r\nconst FormFrame = (props) => {\r\n        return (\r\n                <>\r\n                        <div className=\"form-frame-container\">\r\n                                <div className=\"form-frame\">\r\n                                        {props.children}\r\n                                </div>\r\n                        </div>\r\n                </>\r\n        );\r\n}\r\n\r\nexport default FormFrame;\r\n","const flours = [\r\n        {\r\n                details: {\r\n                        productName: 'קמח חיטה לבן/מלא קמח תירס/קמח אורז',\r\n                        value: 2,\r\n                        gram: 20,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כף)',\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'עמילן תירס/עמילן תפוחי אדמה',\r\n                        value: 2,\r\n                        gram: 20,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כף)',\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'פרורי לחם/קמח מצה',\r\n                        value: 2,\r\n                        gram: 20,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כף)',\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'סולת',\r\n                        value: 2,\r\n                        gram: 20,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כף)',\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'שיבולת שועל',\r\n                        value: 4,\r\n                        gram: 20,\r\n                },\r\n                unit: {\r\n                        gramString: '(גרם)',\r\n                        measureString: '(כף)',\r\n                },\r\n        },\r\n];\r\nexport default flours;  ","// import react state\r\nimport { useState, useEffect } from 'react';\r\n// import from react-select\r\nimport Select from 'react-select';\r\n// import service \r\nimport flours from '../../services/Grains&Bakery/flours';\r\n// import variables \r\nimport { variables } from '../variables';\r\n// import container \r\nimport FormFrame from '../FormFrame';\r\n// import css\r\nimport '../../assets/css/basic.css';\r\n\r\nconst Flour = () => {\r\n        //  array of type calculation\r\n        const types = ['כמות', 'גרם'];\r\n\r\n        // My states  \r\n        const [products] = useState(flours);\r\n        const [productName, setProductName] = useState(flours[0]['details']['productName']);\r\n        const [productType, setProductType] = useState(types[0]);\r\n        const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n        const [productAmount, setProductAmount] = useState(1);\r\n        const [result, setResult] = useState('');\r\n        const [flag, setFlag] = useState(false);\r\n        // Get the product object \r\n        const product = products.find(product => product?.details?.productName === productName);\r\n        // Get array of type\r\n        const type = types.find(type => type === productType);\r\n\r\n        useEffect(() => {\r\n                // Add event listener on mount\r\n                window.addEventListener('resize', handleResize);\r\n\r\n                // Clean up the event listener on unmount\r\n                return () => {\r\n                        window.removeEventListener('resize', handleResize);\r\n                };\r\n        }, []);\r\n\r\n        // My handlers\r\n        const calculateValue = (amount, productType) => {\r\n                // Calculate count \r\n                const count = (amount / product?.details?.value).toLocaleString(variables?.numberFormat);\r\n                // Calculate gram \r\n                const gram = (amount / product?.details?.gram).toLocaleString(variables?.numberFormat);\r\n\r\n                // Match count with NEGLIGIBLE_NUMBER\r\n                const calculationCountFraction = ` ${count}`;\r\n                // Calculate count reasult using toFraction \r\n                const calculationCount = ` ${variables?.fractionCalculation(count)}`;\r\n\r\n                // Match gram with NEGLIGIBLE_NUMBER\r\n                const calculationGramFraction = ` ${gram}`;\r\n                // Calculate gram reasult using toFraction \r\n                const calculationGram = ` ${variables?.fractionCalculation(gram)}`;\r\n\r\n                if (product && type) {\r\n                        return productType === types[0] && calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCount\r\n                                : productType === types[1] && calculationGramFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationGram\r\n                                        : 'זניח';\r\n                }\r\n                else {\r\n                        return alert(variables.stringAlert);\r\n                }\r\n        };\r\n\r\n        const handleProduct = (event) => {\r\n                setProductName(event.target.value);\r\n        };\r\n\r\n        const handleProductPC = (selectedOption) => {\r\n                setProductName(selectedOption.value);\r\n        };\r\n\r\n        const handleAmount = (event) => {\r\n                setProductAmount(event.target.value);\r\n        };\r\n\r\n        const handleProductType = (event) => {\r\n                setProductType(event.target.value);\r\n        };\r\n\r\n        const handleProductTypePC = (selectedOption) => {\r\n                setProductType(selectedOption.value);\r\n        };\r\n        const handleResize = () => {\r\n                setViewportWidth(window.innerWidth);\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n                // Prevent reload the page\r\n                e.preventDefault();\r\n                try {\r\n                        setResult(calculateValue(productAmount, productType));\r\n                        setFlag(true);\r\n                }\r\n                catch (err) {\r\n                        console.log(err.message);\r\n                        setResult(variables.stringResult);\r\n                }\r\n        };\r\n\r\n        const productsOptions = products.map((product) => ({\r\n                value: product?.details?.productName,\r\n                label:\r\n                        productType === types[0]\r\n                                ? `${product?.details?.productName} ${product?.unit?.measureString}`\r\n                                : `${product?.details?.productName} ${product?.unit?.gramString}`,\r\n        }));\r\n\r\n        const typesOptions = types.map((type) => ({\r\n                value: type,\r\n                label: type\r\n        }));\r\n\r\n        return (\r\n                <>\r\n                        <FormFrame>\r\n                                <form onSubmit={handleSubmit}>\r\n                                        <h1>קמח (לא מבושל)</h1>\r\n                                        <label id='productType'>\r\n                                                חישוב לפי כמות או גרמים:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                id='productType'\r\n                                                                name='productType'\r\n                                                                value={productType}\r\n                                                                onChange={handleProductType}\r\n                                                        >\r\n                                                                {\r\n                                                                        types.map((type) => (\r\n                                                                                <option key={type} name=\"productType\" value={type}>\r\n                                                                                        {type}\r\n                                                                                </option>\r\n                                                                        ))\r\n                                                                }\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                name='productType'\r\n                                                                id='productType'\r\n                                                                options={typesOptions}\r\n                                                                isSearchable\r\n                                                                value={typesOptions.find((option) => option.value === productType)}\r\n                                                                onChange={handleProductTypePC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <label htmlFor=\"productAmount\">\r\n                                                כמות נצרכת:\r\n                                                <input\r\n                                                        name='productAmount'\r\n                                                        type=\"number\"\r\n                                                        id=\"productAmount\"\r\n                                                        min=\"0\"\r\n                                                        max=\"1000\"\r\n                                                        step=\"any\"\r\n                                                        value={productAmount}\r\n                                                        onChange={handleAmount}\r\n                                                />\r\n                                        </label>\r\n                                        <label>\r\n                                                סוג הקמח:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                value={productName}\r\n                                                                onChange={handleProduct}\r\n                                                        >\r\n                                                                {products.map((product) => (\r\n                                                                        <option key={product?.details?.productName} value={product?.details?.productName}>\r\n                                                                                {productType === types[0] ? `${product?.details?.productName} ${product?.unit?.measureString}` : `${product?.details?.productName} ${product?.unit?.gramString}`}\r\n                                                                        </option>\r\n                                                                ))}\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                options={productsOptions}\r\n                                                                isSearchable\r\n                                                                value={productsOptions.find((option) => option.value === productName)}\r\n                                                                onChange={handleProductPC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <div className='div-result div-result-pc'>\r\n                                                {flag === true && 'מספר מנות:'}\r\n                                                <div className='result'>{result}</div>\r\n                                        </div>\r\n                                        <button type=\"submit\">חשב</button>\r\n                                </form >\r\n                        </FormFrame>\r\n                </>\r\n        );\r\n};\r\n\r\nexport default Flour;","// Library that parse decimals into fractions\r\nimport { toFraction } from 'fraction-parser';\r\n\r\nexport const variables = {\r\n  // Use for toLocaleString\r\n  numberFormat: { minimumFractionDigits: 2, maximumFractionDigits: 2 },\r\n  // Use for toFraction\r\n  fractionFormat: { useUnicodeVulgar: true },\r\n  fractionCalculation: (variable) =>\r\n    toFraction(Number(variable) || 0, variables.fractionFormat),\r\n  NEGLIGIBLE_NUMBER: 0.25,\r\n  stringResult: 'קיימת בעיה, במקרה והיא חוזרת אנא פנה לבונה האתר',\r\n  stringAlert: 'הערך שהוזן אינו קיים',\r\n};\r\n"],"names":["props","className","children","details","productName","value","gram","unit","gramString","measureString","types","useState","flours","products","setProductName","productType","setProductType","window","innerWidth","viewportWidth","setViewportWidth","productAmount","setProductAmount","result","setResult","flag","setFlag","product","find","type","useEffect","addEventListener","handleResize","removeEventListener","productsOptions","map","label","typesOptions","FormFrame","onSubmit","e","preventDefault","amount","count","toLocaleString","variables","numberFormat","calculationCountFraction","calculationCount","fractionCalculation","calculationGramFraction","calculationGram","NEGLIGIBLE_NUMBER","alert","stringAlert","calculateValue","err","console","log","message","stringResult","id","name","onChange","event","target","options","isSearchable","option","selectedOption","htmlFor","min","max","step","minimumFractionDigits","maximumFractionDigits","fractionFormat","useUnicodeVulgar","variable","toFraction","Number"],"sourceRoot":""}