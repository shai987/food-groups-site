{"version":3,"file":"static/js/311.262e6c65.chunk.js","mappings":"sKAcA,EAZkB,SAACA,GACX,OACQ,+BACQ,gBAAKC,UAAU,uBAAsB,UAC7B,gBAAKA,UAAU,aAAY,SAClBD,EAAME,cAK/C,C,qGC6BA,EAzCa,CACL,CACQC,QAAS,CACDC,YAAa,uCACbC,MAAO,EACPC,IAAK,GAEbA,IAAK,CACGC,UAAW,0GAEnBC,KAAM,CACEC,cAAe,qCAG/B,CACQN,QAAS,CACDC,YAAa,6CACbC,MAAO,EACPC,IAAK,GAEbA,IAAK,CACGC,UAAW,0GAEnBC,KAAM,CACEC,cAAe,qCAG/B,CACQN,QAAS,CACDC,YAAa,oDACbC,MAAO,EACPC,IAAK,GAEbA,IAAK,CACGC,UAAW,0GAEnBC,KAAM,CACEC,cAAe,sC,uCC8GvC,EAtIa,WAEL,OAAmBC,EAAAA,EAAAA,UAASC,GAArBC,GAA0B,YAAlB,GACf,GAAsCF,EAAAA,EAAAA,UAASC,EAAK,GAAY,QAAe,aAAE,eAA1EP,EAAW,KAAES,EAAc,KAClC,GAA0CH,EAAAA,EAAAA,UAASI,OAAOC,YAAW,eAA9DC,EAAa,KAAEC,EAAgB,KACtC,GAA0CP,EAAAA,EAAAA,UAAS,GAAE,eAA9CQ,EAAa,KAAEC,EAAgB,KACtC,GAA4BT,EAAAA,EAAAA,UAAS,IAAG,eAAjCU,EAAM,KAAEC,EAAS,KACxB,GAAwBX,EAAAA,EAAAA,WAAS,GAAM,eAAhCY,EAAI,KAAEC,EAAO,KAEdC,EAAUZ,EAASa,MAAK,SAAAD,GAAO,aAAW,OAAPA,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASrB,eAAO,WAAT,EAAP,EAAkBC,eAAgBA,CAAW,KAEtFsB,EAAAA,EAAAA,YAAU,WAKF,OAHAZ,OAAOa,iBAAiB,SAAUC,GAG3B,WACCd,OAAOe,oBAAoB,SAAUD,EAC7C,CACR,GAAG,IAGH,IAoCMA,EAAe,WACbX,EAAiBH,OAAOC,WAChC,EAeMe,EAAkBlB,EAASmB,KAAI,SAACP,GAAO,gBAAM,CAC3CnB,MAAc,OAAPmB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASrB,eAAO,WAAT,EAAP,EAAkBC,YACzB4B,MAAM,GAAD,OAAY,OAAPR,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASrB,eAAO,WAAT,EAAP,EAAkBC,YAAW,YAAW,OAAPoB,QAAO,IAAPA,GAAa,QAAN,EAAPA,EAAShB,YAAI,WAAN,EAAP,EAAeC,eACjE,IAED,OACQ,+BACQ,SAACwB,EAAA,EAAS,WACF,kBAAMC,SArBT,SAACC,GAEdA,EAAEC,iBACF,IACQf,EA5CO,SAACgB,GAAY,IAAD,MAErBC,GAASD,GAAgB,OAAPb,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASrB,eAAO,WAAT,EAAP,EAAkBE,QAAOkC,eAAwB,OAATC,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWC,cAErEC,EAAU,UAAa,OAAPlB,QAAO,IAAPA,GAAY,QAAL,EAAPA,EAASlB,WAAG,WAAL,EAAP,EAAcC,UAAUoC,MAAM,uDAAe,GAAE,sDAE/DC,EAAoB,OAAPpB,QAAO,IAAPA,GAAY,QAAL,EAAPA,EAASlB,WAAG,WAAL,EAAP,EAAcC,UAAUoC,MAAM,uDAAe,GAG1DE,EAAwB,WAAOP,GAE/BQ,EAAqB,WAAgB,OAATN,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWO,oBAAoBT,GAAM,cAAMI,EAAU,YAAa,OAATF,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWO,oBAAoBT,GAAM,YAAIM,GAEpI,OAAII,MAAM9B,GACK+B,MAAMT,EAAAA,EAAUU,qBAE3B1B,EACWqB,IAAqC,OAATL,EAAAA,QAAS,IAATA,EAAAA,OAAS,EAATA,EAAAA,EAAWW,mBAAoBL,EAAwB,4BAGnFG,MAAMT,EAAAA,EAAUY,YAEvC,CAsB0BC,CAAenC,IACzBK,GAAQ,EAChB,CACA,MAAO+B,GACCC,QAAQC,IAAIF,EAAIG,SAChBpC,EAAUmB,EAAAA,EAAUkB,aAC5B,CACR,EAUqD,WACrB,wBAAI,wFACJ,mBAAOC,QAAQ,gBAAe,UAAC,4DAEvB,kBACQC,KAAK,gBACLC,KAAK,SACLC,GAAG,gBACHC,IAAI,IACJC,IAAI,OACJC,KAAK,MACL5D,MAAOa,EACPgD,SAzC3B,SAACC,GACdhD,EAAiBgD,EAAMC,OAAO/D,MACtC,QA0CgC,6BAAO,qDAEEW,GAAiB,KACV,mBACQX,MAAOD,EACP8D,SAzDlC,SAACC,GACftD,EAAesD,EAAMC,OAAO/D,MACpC,EAuDgF,SAEvBO,EAASmB,KAAI,SAACP,GAAO,mBACd,mBAA4CnB,MAAc,OAAPmB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASrB,eAAO,WAAT,EAAP,EAAkBC,YAAY,mBAC9D,OAAPoB,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASrB,eAAO,WAAT,EAAP,EAAkBC,YAAW,YAAW,OAAPoB,QAAO,IAAPA,GAAa,QAAN,EAAPA,EAAShB,YAAI,WAAN,EAAP,EAAeC,gBADxC,OAAPe,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASrB,eAAO,WAAT,EAAP,EAAkBC,YAEtB,OAIzB,SAAC,KAAM,CACCiE,QAASvC,EACTwC,cAAY,EACZC,aAAW,EACXC,iBAAkB,kBAAMhC,EAAAA,EAAUiC,uCAAuC,EACzEC,YAAalC,EAAAA,EAAUmC,aACvBtE,MAAOyB,EAAgBL,MAAK,SAACmD,GAAM,OAAKA,EAAOvE,QAAUD,CAAW,IACpE8D,SArEhC,SAACW,GACjBhE,EAAegE,EAAiBA,EAAexE,MAAQ,KAC/D,QAuEgC,iBAAKJ,UAAU,2BAA0B,WACvB,IAATqB,GAAiB,sDAClB,gBAAKrB,UAAU,SAAQ,SAAEmB,QAEjC,mBAAQyC,KAAK,SAAQ,SAAC,6BAK9D,C,4FC9IarB,EAAY,CAEvBC,aAAc,CAAEqC,sBAAuB,EAAGC,sBAAuB,GAEjEC,eAAgB,CAAEC,kBAAkB,GACpClC,oBAAqB,SAACmC,GAAQ,OAC5BC,EAAAA,EAAAA,YAAWC,OAAOF,IAAa,EAAG1C,EAAUwC,eAAe,EAC7D7B,kBAAmB,IACnBO,aAAc,gPACdN,YAAa,yHACbF,oBAAqB,uEACrByB,aAAc,gHACdU,wCAAyC,qKACzCZ,wCAAyC,6GAI9Ba,EAAe,SAACtE,GAC3B,IAAMuE,EAAmB,CACvB,KAAM,OACN,KAAM,QACN,QAAS,QACT,KAAM,SAOFC,EAJeC,OAAOC,KAAKH,GAC9BxD,IAAI4D,YACJC,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAID,CAAC,IAEgBpE,MACrC,SAACsE,GAAK,OAAK/E,GAAiB+E,CAAK,IAGnC,OAAOP,EAAoBD,EAAiBC,GAAqB,MACnE,C","sources":["components/FormFrame.jsx","services/Meat&Substitutes/lite.js","components/Meat&Substitutes/Lite.jsx","components/variables.js"],"sourcesContent":["import '../assets/css/FormFrame.css'; // import the CSS file\r\n\r\nconst FormFrame = (props) => {\r\n        return (\r\n                <>\r\n                        <div className=\"form-frame-container\">\r\n                                <div className=\"form-frame\">\r\n                                        {props.children}\r\n                                </div>\r\n                        </div>\r\n                </>\r\n        );\r\n}\r\n\r\nexport default FormFrame;\r\n","const lite = [\r\n        {\r\n                details: {\r\n                        productName: 'קוטליט',\r\n                        value: 2,\r\n                        fat: 1,\r\n                },\r\n                fat: {\r\n                        fatString: ' יש להוריד מנות שומן *',\r\n                },\r\n                unit: {\r\n                        measureString: '(יחידה)',\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'המבורגר',\r\n                        value: 2,\r\n                        fat: 1,\r\n                },\r\n                fat: {\r\n                        fatString: ' יש להוריד מנות שומן *',\r\n                },\r\n                unit: {\r\n                        measureString: '(יחידה)',\r\n                },\r\n        },\r\n        {\r\n                details: {\r\n                        productName: 'קציצת ירק',\r\n                        value: 2,\r\n                        fat: 1,\r\n                },\r\n                fat: {\r\n                        fatString: ' יש להוריד מנות שומן *',\r\n                },\r\n                unit: {\r\n                        measureString: '(יחידה)',\r\n                },\r\n        },\r\n];\r\nexport default lite;  ","// import react state\r\nimport { useState, useEffect } from 'react';\r\n// import from react-select\r\nimport Select from 'react-select';\r\n// import service \r\nimport lite from '../../services/Meat&Substitutes/lite';\r\n// import variables \r\nimport { variables } from '../variables';\r\n// import container \r\nimport FormFrame from '../FormFrame';\r\n// import css\r\nimport '../../assets/css/basic.css';\r\n\r\nconst Lite = () => {\r\n        // My states \r\n        const [products] = useState(lite);\r\n        const [productName, setProductName] = useState(lite[0]['details']['productName']);\r\n        const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n        const [productAmount, setProductAmount] = useState(1);\r\n        const [result, setResult] = useState('');\r\n        const [flag, setFlag] = useState(false);\r\n        // Get the product object \r\n        const product = products.find(product => product?.details?.productName === productName);\r\n\r\n        useEffect(() => {\r\n                // Add event listener on mount\r\n                window.addEventListener('resize', handleResize);\r\n\r\n                // Clean up the event listener on unmount\r\n                return () => {\r\n                        window.removeEventListener('resize', handleResize);\r\n                };\r\n        }, []);\r\n\r\n        // My handlers\r\n        const calculateValue = (amount) => {\r\n                // Calculate count \r\n                const count = (amount / product?.details?.value).toLocaleString(variables?.numberFormat);\r\n                // Calculate fatString0 \r\n                const fatString0 = `${product?.fat?.fatString.split(\" יש להוריד \")[0]} יש להוריד`;\r\n                // Calculate fatString1 \r\n                const fatString1 = product?.fat?.fatString.split(\" יש להוריד \")[1];\r\n\r\n                // Match count with NEGLIGIBLE_NUMBER\r\n                const calculationCountFraction = ` ${count}`;\r\n                // Calculate count bread reasult using toFraction \r\n                const calculationCountBread = ` ${variables?.fractionCalculation(count)}\\n ${fatString0} ${variables?.fractionCalculation(count)} ${fatString1}`;\r\n\r\n                if (isNaN(productAmount)) {\r\n                        return alert(variables.stringProductAmount);\r\n                }\r\n                if (product) {\r\n                        return calculationCountFraction >= variables?.NEGLIGIBLE_NUMBER ? calculationCountBread : ' זניח';\r\n                }\r\n                else {\r\n                        return alert(variables.stringAlert);\r\n                }\r\n        };\r\n\r\n        const handleProduct = (event) => {\r\n                setProductName(event.target.value);\r\n        };\r\n\r\n        const handleProductPC = (selectedOption) => {\r\n                setProductName(selectedOption ? selectedOption.value : null);\r\n        };\r\n\r\n        const handleAmount = (event) => {\r\n                setProductAmount(event.target.value);\r\n        };\r\n\r\n        const handleResize = () => {\r\n                setViewportWidth(window.innerWidth);\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n                // Prevent reload the page\r\n                e.preventDefault();\r\n                try {\r\n                        setResult(calculateValue(productAmount));\r\n                        setFlag(true);\r\n                }\r\n                catch (err) {\r\n                        console.log(err.message);\r\n                        setResult(variables.stringResult);\r\n                }\r\n        };\r\n\r\n        const productsOptions = products.map((product) => ({\r\n                value: product?.details?.productName,\r\n                label: `${product?.details?.productName} ${product?.unit?.measureString}`\r\n        }));\r\n\r\n        return (\r\n                <>\r\n                        <FormFrame>\r\n                                <form onSubmit={handleSubmit}>\r\n                                        <h1>תחליפי בשר - לייט</h1>\r\n                                        <label htmlFor=\"productAmount\">\r\n                                                כמות נאכלת:\r\n                                                <input\r\n                                                        name='productAmount'\r\n                                                        type=\"number\"\r\n                                                        id=\"productAmount\"\r\n                                                        min=\"0\"\r\n                                                        max=\"1000\"\r\n                                                        step=\"any\"\r\n                                                        value={productAmount}\r\n                                                        onChange={handleAmount}\r\n                                                />\r\n                                        </label>\r\n                                        <label>\r\n                                                סוג המוצר:\r\n                                                {viewportWidth <= 600 ? (\r\n                                                        <select\r\n                                                                value={productName}\r\n                                                                onChange={handleProduct}\r\n                                                        >\r\n                                                                {products.map((product) => (\r\n                                                                        <option key={product?.details?.productName} value={product?.details?.productName}>\r\n                                                                                {`${product?.details?.productName} ${product?.unit?.measureString}`}\r\n                                                                        </option>\r\n                                                                ))}\r\n                                                        </select>\r\n                                                ) : (\r\n                                                        <Select\r\n                                                                options={productsOptions}\r\n                                                                isSearchable\r\n                                                                isClearable\r\n                                                                noOptionsMessage={() => variables.stringSelectProductNameNoOptionsMessage}\r\n                                                                placeholder={variables.stringSelect}\r\n                                                                value={productsOptions.find((option) => option.value === productName)}\r\n                                                                onChange={handleProductPC}\r\n                                                        />\r\n                                                )}\r\n                                        </label>\r\n                                        <div className='div-result div-result-pc'>\r\n                                                {flag === true && 'מספר מנות:'}\r\n                                                <div className='result'>{result}</div>\r\n                                        </div>\r\n                                        <button type=\"submit\">חשב</button>\r\n                                </form >\r\n                        </FormFrame >\r\n                </>\r\n        );\r\n};\r\n\r\nexport default Lite;","// Library that parse decimals into fractions\r\nimport { toFraction } from 'fraction-parser';\r\n\r\nexport const variables = {\r\n  // Use for toLocaleString\r\n  numberFormat: { minimumFractionDigits: 2, maximumFractionDigits: 2 },\r\n  // Use for toFraction\r\n  fractionFormat: { useUnicodeVulgar: true },\r\n  fractionCalculation: (variable) =>\r\n    toFraction(Number(variable) || 0, variables.fractionFormat),\r\n  NEGLIGIBLE_NUMBER: 0.25, // זניח\r\n  stringResult: 'קיימת בעיה, במקרה והיא חוזרת אנא פנה לבונה האתר',\r\n  stringAlert: 'נא לבחור פריט מן הרשימה',\r\n  stringProductAmount: 'יש להזין מספר',\r\n  stringSelect: 'יש ללחוץ על מנת לבחור...',\r\n  stringSelectProductTypeNoOptionsMessage: 'ניתן לחשב רק באמצעות כמות או גרם',\r\n  stringSelectProductNameNoOptionsMessage: 'הפריט לא נמצא ברשימה',\r\n};\r\n\r\n// Use for select-react dropdown list\r\nexport const getMaxHeight = (viewportWidth) => {\r\n  const maxHeightOptions = {\r\n    2560: 'none',\r\n    2400: '295px',\r\n    1745.45: '180px',\r\n    1536: '150px',\r\n  };\r\n\r\n  const viewportKeys = Object.keys(maxHeightOptions)\r\n    .map(parseFloat)\r\n    .sort((a, b) => b - a);\r\n\r\n  const selectedMaxHeight = viewportKeys.find(\r\n    (width) => viewportWidth >= width\r\n  );\r\n\r\n  return selectedMaxHeight ? maxHeightOptions[selectedMaxHeight] : 'none';\r\n};\r\n"],"names":["props","className","children","details","productName","value","fat","fatString","unit","measureString","useState","lite","products","setProductName","window","innerWidth","viewportWidth","setViewportWidth","productAmount","setProductAmount","result","setResult","flag","setFlag","product","find","useEffect","addEventListener","handleResize","removeEventListener","productsOptions","map","label","FormFrame","onSubmit","e","preventDefault","amount","count","toLocaleString","variables","numberFormat","fatString0","split","fatString1","calculationCountFraction","calculationCountBread","fractionCalculation","isNaN","alert","stringProductAmount","NEGLIGIBLE_NUMBER","stringAlert","calculateValue","err","console","log","message","stringResult","htmlFor","name","type","id","min","max","step","onChange","event","target","options","isSearchable","isClearable","noOptionsMessage","stringSelectProductNameNoOptionsMessage","placeholder","stringSelect","option","selectedOption","minimumFractionDigits","maximumFractionDigits","fractionFormat","useUnicodeVulgar","variable","toFraction","Number","stringSelectProductTypeNoOptionsMessage","getMaxHeight","maxHeightOptions","selectedMaxHeight","Object","keys","parseFloat","sort","a","b","width"],"sourceRoot":""}